; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28315.0 

	TITLE	g:\c_library\zlib-vs\zlib-1.2.11\trees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	__length_code
PUBLIC	__dist_code
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+4
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+4
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
PUBLIC	__tr_align
PUBLIC	__tr_init
PUBLIC	__tr_flush_block
PUBLIC	__tr_flush_bits
PUBLIC	__tr_stored_block
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT __tr_stored_block
_TEXT	SEGMENT
_buf$1$ = -4						; size = 4
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_stored_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 868  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	89 55 fc	 mov	 DWORD PTR _buf$1$[ebp], edx

; 869  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  0000b	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00011	0f b7 9f b8 16
	00 00		 movzx	 ebx, WORD PTR [edi+5816]
  00018	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0001b	7e 4e		 jle	 SHORT $LN2@tr_stored_
  0001d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00020	56		 push	 esi
  00021	0f b7 75 0c	 movzx	 esi, WORD PTR _last$[ebp]
  00025	66 8b d6	 mov	 dx, si
  00028	66 d3 e2	 shl	 dx, cl
  0002b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002e	66 0b d3	 or	 dx, bx
  00031	66 89 97 b8 16
	00 00		 mov	 WORD PTR [edi+5816], dx
  00038	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0003b	ff 47 14	 inc	 DWORD PTR [edi+20]
  0003e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00041	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00044	8a 87 b9 16 00
	00		 mov	 al, BYTE PTR [edi+5817]
  0004a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0004d	b1 10		 mov	 cl, 16			; 00000010H
  0004f	0f b7 87 bc 16
	00 00		 movzx	 eax, WORD PTR [edi+5820]
  00056	ff 47 14	 inc	 DWORD PTR [edi+20]
  00059	2a c8		 sub	 cl, al
  0005b	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  00062	66 d3 ee	 shr	 si, cl
  00065	0f b7 c6	 movzx	 eax, si
  00068	5e		 pop	 esi
  00069	eb 16		 jmp	 SHORT $LN3@tr_stored_
$LN2@tr_stored_:
  0006b	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0006e	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  00074	66 8b 45 0c	 mov	 ax, WORD PTR _last$[ebp]
  00078	66 d3 e0	 shl	 ax, cl
  0007b	66 0b c3	 or	 ax, bx
  0007e	0f b7 c0	 movzx	 eax, ax
$LN3@tr_stored_:

; 870  :     bi_windup(s);        /* align on byte boundary */

  00081	8b cf		 mov	 ecx, edi
  00083	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  0008a	e8 00 00 00 00	 call	 _bi_windup

; 871  :     put_short(s, (ush)stored_len);

  0008f	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00092	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00095	8b 5d 08	 mov	 ebx, DWORD PTR _stored_len$[ebp]
  00098	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0009b	ff 47 14	 inc	 DWORD PTR [edi+20]
  0009e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000a1	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000a4	0f b7 db	 movzx	 ebx, bx
  000a7	8b cb		 mov	 ecx, ebx

; 872  :     put_short(s, (ush)~stored_len);

  000a9	f7 d3		 not	 ebx
  000ab	c1 e9 08	 shr	 ecx, 8
  000ae	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000b1	ff 47 14	 inc	 DWORD PTR [edi+20]
  000b4	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000b7	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000ba	8a 4d 08	 mov	 cl, BYTE PTR _stored_len$[ebp]
  000bd	f6 d1		 not	 cl
  000bf	c1 eb 08	 shr	 ebx, 8
  000c2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000c5	ff 47 14	 inc	 DWORD PTR [edi+20]
  000c8	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000cb	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000ce	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl

; 873  :     zmemcpy(s->pending_buf + s->pending, (Bytef *)buf, stored_len);

  000d1	8b 5d 08	 mov	 ebx, DWORD PTR _stored_len$[ebp]
  000d4	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000d7	ff 47 14	 inc	 DWORD PTR [edi+20]
  000da	03 47 14	 add	 eax, DWORD PTR [edi+20]
  000dd	53		 push	 ebx
  000de	ff 75 fc	 push	 DWORD PTR _buf$1$[ebp]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 _memcpy
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 874  :     s->pending += stored_len;

  000ea	01 5f 14	 add	 DWORD PTR [edi+20], ebx
  000ed	5f		 pop	 edi
  000ee	5b		 pop	 ebx

; 875  : #ifdef ZLIB_DEBUG
; 876  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 877  :     s->compressed_len += (stored_len + 4) << 3;
; 878  :     s->bits_sent += 2*16;
; 879  :     s->bits_sent += stored_len<<3;
; 880  : #endif
; 881  : }

  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c3		 ret	 0
__tr_stored_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT __tr_flush_bits
_TEXT	SEGMENT
__tr_flush_bits PROC					; COMDAT
; _s$ = ecx

; 889  :     bi_flush(s);

  00000	e9 00 00 00 00	 jmp	 _bi_flush
__tr_flush_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT __tr_flush_block
_TEXT	SEGMENT
_buf$1$ = -8						; size = 4
_max_blindex$1$ = -4					; size = 4
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_flush_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 916  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 917  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 918  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _max_blindex$1$[ebp], 0
  00012	8b da		 mov	 ebx, edx
  00014	89 5d f8	 mov	 DWORD PTR _buf$1$[ebp], ebx

; 919  : 
; 920  :     /* Build the Huffman trees unless a stored block is forced */
; 921  :     if (s->level > 0) {

  00017	83 bf 84 00 00
	00 00		 cmp	 DWORD PTR [edi+132], 0
  0001e	7e 58		 jle	 SHORT $LN2@tr_flush_b

; 922  : 
; 923  :         /* Check if the file is binary or text */
; 924  :         if (s->strm->data_type == Z_UNKNOWN)

  00020	8b 37		 mov	 esi, DWORD PTR [edi]
  00022	83 7e 2c 02	 cmp	 DWORD PTR [esi+44], 2
  00026	75 08		 jne	 SHORT $LN4@tr_flush_b

; 925  :             s->strm->data_type = detect_data_type(s);

  00028	e8 00 00 00 00	 call	 _detect_data_type
  0002d	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$LN4@tr_flush_b:

; 926  : 
; 927  :         /* Construct the literal and distance trees */
; 928  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  00030	8d 97 18 0b 00
	00		 lea	 edx, DWORD PTR [edi+2840]
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 _build_tree

; 929  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 930  :                 s->static_len));
; 931  : 
; 932  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  0003d	8d 97 24 0b 00
	00		 lea	 edx, DWORD PTR [edi+2852]
  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 _build_tree

; 933  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 934  :                 s->static_len));
; 935  :         /* At this point, opt_len and static_len are the total bit lengths of
; 936  :          * the compressed block data, excluding the tree representations.
; 937  :          */
; 938  : 
; 939  :         /* Build the bit length tree for the above two trees, and get the index
; 940  :          * in bl_order of the last bit length code to send.
; 941  :          */
; 942  :         max_blindex = build_bl_tree(s);

  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 _build_bl_tree

; 943  : 
; 944  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 945  :         opt_lenb = (s->opt_len+3+7)>>3;

  00051	8b 8f a8 16 00
	00		 mov	 ecx, DWORD PTR [edi+5800]

; 946  :         static_lenb = (s->static_len+3+7)>>3;

  00057	8b 97 ac 16 00
	00		 mov	 edx, DWORD PTR [edi+5804]
  0005d	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00060	83 c2 0a	 add	 edx, 10			; 0000000aH
  00063	c1 e9 03	 shr	 ecx, 3
  00066	c1 ea 03	 shr	 edx, 3

; 947  : 
; 948  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 949  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 950  :                 s->last_lit));
; 951  : 
; 952  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
; 953  : 
; 954  :     } else {

  00069	3b d1		 cmp	 edx, ecx
  0006b	89 45 fc	 mov	 DWORD PTR _max_blindex$1$[ebp], eax
  0006e	8b f2		 mov	 esi, edx
  00070	0f 47 f1	 cmova	 esi, ecx
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  00076	eb 08		 jmp	 SHORT $LN3@tr_flush_b
$LN2@tr_flush_b:

; 955  :         Assert(buf != (char*)0, "lost buf");
; 956  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  0007b	8d 51 05	 lea	 edx, DWORD PTR [ecx+5]
  0007e	8b f2		 mov	 esi, edx
$LN3@tr_flush_b:

; 957  :     }
; 958  : 
; 959  : #ifdef FORCE_STORED
; 960  :     if (buf != (char*)0) { /* force stored block */
; 961  : #else
; 962  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  00080	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00083	3b c6		 cmp	 eax, esi
  00085	77 1b		 ja	 SHORT $LN6@tr_flush_b
  00087	85 db		 test	 ebx, ebx
  00089	74 17		 je	 SHORT $LN6@tr_flush_b

; 963  :                        /* 4: two words for the lengths */
; 964  : #endif
; 965  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 966  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 967  :          * the last block flush, because compression would have been
; 968  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 969  :          * transform a block into a stored block.
; 970  :          */
; 971  :         _tr_stored_block(s, buf, stored_len, last);

  0008b	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  0008e	8b 55 f8	 mov	 edx, DWORD PTR _buf$1$[ebp]
  00091	53		 push	 ebx
  00092	51		 push	 ecx
  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 __tr_stored_block
  0009a	83 c4 08	 add	 esp, 8
  0009d	e9 66 01 00 00	 jmp	 $LN9@tr_flush_b
$LN6@tr_flush_b:

; 972  : 
; 973  : #ifdef FORCE_STATIC
; 974  :     } else if (static_lenb >= 0) { /* force static trees */
; 975  : #else
; 976  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  000a2	83 bf 88 00 00
	00 04		 cmp	 DWORD PTR [edi+136], 4
  000a9	0f 84 c2 00 00
	00		 je	 $LN10@tr_flush_b
  000af	3b d6		 cmp	 edx, esi
  000b1	0f 84 ba 00 00
	00		 je	 $LN10@tr_flush_b

; 980  :                        (const ct_data *)static_dtree);
; 981  : #ifdef ZLIB_DEBUG
; 982  :         s->compressed_len += 3 + s->static_len;
; 983  : #endif
; 984  :     } else {
; 985  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  000b7	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  000bd	0f b7 87 b8 16
	00 00		 movzx	 eax, WORD PTR [edi+5816]
  000c4	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  000c7	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000ca	7e 4b		 jle	 SHORT $LN13@tr_flush_b
  000cc	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  000cf	66 8b d6	 mov	 dx, si
  000d2	66 d3 e2	 shl	 dx, cl
  000d5	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000d8	66 0b d0	 or	 dx, ax
  000db	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000de	66 89 97 b8 16
	00 00		 mov	 WORD PTR [edi+5816], dx
  000e5	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000e8	ff 47 14	 inc	 DWORD PTR [edi+20]
  000eb	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000ee	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000f1	8a 87 b9 16 00
	00		 mov	 al, BYTE PTR [edi+5817]
  000f7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000fa	b1 10		 mov	 cl, 16			; 00000010H
  000fc	0f b7 87 bc 16
	00 00		 movzx	 eax, WORD PTR [edi+5820]
  00103	ff 47 14	 inc	 DWORD PTR [edi+20]
  00106	2a c8		 sub	 cl, al
  00108	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  0010f	66 d3 ee	 shr	 si, cl
  00112	0f b7 c6	 movzx	 eax, si
  00115	eb 1c		 jmp	 SHORT $LN14@tr_flush_b
$LN13@tr_flush_b:
  00117	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0011a	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  00120	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00123	66 d3 e0	 shl	 ax, cl
  00126	0f b7 8f b8 16
	00 00		 movzx	 ecx, WORD PTR [edi+5816]
  0012d	66 0b c1	 or	 ax, cx
  00130	0f b7 c0	 movzx	 eax, ax
$LN14@tr_flush_b:

; 986  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,

  00133	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  0013a	8b cf		 mov	 ecx, edi
  0013c	8b 45 fc	 mov	 eax, DWORD PTR _max_blindex$1$[ebp]
  0013f	8b 97 1c 0b 00
	00		 mov	 edx, DWORD PTR [edi+2844]
  00145	40		 inc	 eax
  00146	50		 push	 eax
  00147	8b 87 28 0b 00
	00		 mov	 eax, DWORD PTR [edi+2856]
  0014d	42		 inc	 edx
  0014e	40		 inc	 eax
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 _send_all_trees

; 987  :                        max_blindex+1);
; 988  :         compress_block(s, (const ct_data *)s->dyn_ltree,

  00155	8d 87 88 09 00
	00		 lea	 eax, DWORD PTR [edi+2440]
  0015b	8b cf		 mov	 ecx, edi
  0015d	50		 push	 eax
  0015e	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
  00164	e8 00 00 00 00	 call	 _compress_block
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016c	e9 97 00 00 00	 jmp	 $LN9@tr_flush_b
$LN10@tr_flush_b:

; 977  : #endif
; 978  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  00171	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00177	0f b7 87 b8 16
	00 00		 movzx	 eax, WORD PTR [edi+5816]
  0017e	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  00181	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00184	7e 4b		 jle	 SHORT $LN11@tr_flush_b
  00186	8d 73 02	 lea	 esi, DWORD PTR [ebx+2]
  00189	66 8b d6	 mov	 dx, si
  0018c	66 d3 e2	 shl	 dx, cl
  0018f	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00192	66 0b d0	 or	 dx, ax
  00195	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00198	66 89 97 b8 16
	00 00		 mov	 WORD PTR [edi+5816], dx
  0019f	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001a2	ff 47 14	 inc	 DWORD PTR [edi+20]
  001a5	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  001a8	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  001ab	8a 87 b9 16 00
	00		 mov	 al, BYTE PTR [edi+5817]
  001b1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001b4	b1 10		 mov	 cl, 16			; 00000010H
  001b6	0f b7 87 bc 16
	00 00		 movzx	 eax, WORD PTR [edi+5820]
  001bd	ff 47 14	 inc	 DWORD PTR [edi+20]
  001c0	2a c8		 sub	 cl, al
  001c2	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  001c9	66 d3 ee	 shr	 si, cl
  001cc	0f b7 c6	 movzx	 eax, si
  001cf	eb 1c		 jmp	 SHORT $LN12@tr_flush_b
$LN11@tr_flush_b:
  001d1	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  001d4	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  001da	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  001dd	66 d3 e0	 shl	 ax, cl
  001e0	0f b7 8f b8 16
	00 00		 movzx	 ecx, WORD PTR [edi+5816]
  001e7	66 0b c1	 or	 ax, cx
  001ea	0f b7 c0	 movzx	 eax, ax
$LN12@tr_flush_b:

; 979  :         compress_block(s, (const ct_data *)static_ltree,

  001ed	68 00 00 00 00	 push	 OFFSET _static_dtree
  001f2	ba 00 00 00 00	 mov	 edx, OFFSET _static_ltree
  001f7	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  001fe	8b cf		 mov	 ecx, edi
  00200	e8 00 00 00 00	 call	 _compress_block
  00205	83 c4 04	 add	 esp, 4
$LN9@tr_flush_b:

; 989  :                        (const ct_data *)s->dyn_dtree);
; 990  : #ifdef ZLIB_DEBUG
; 991  :         s->compressed_len += 3 + s->opt_len;
; 992  : #endif
; 993  :     }
; 994  :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 995  :     /* The above check is made mod 2^32, for files larger than 512 MB
; 996  :      * and uLong implemented on 32 bits.
; 997  :      */
; 998  :     init_block(s);

  00208	8b cf		 mov	 ecx, edi
  0020a	e8 00 00 00 00	 call	 _init_block

; 999  : 
; 1000 :     if (last) {

  0020f	85 db		 test	 ebx, ebx
  00211	74 05		 je	 SHORT $LN15@tr_flush_b

; 1001 :         bi_windup(s);

  00213	e8 00 00 00 00	 call	 _bi_windup
$LN15@tr_flush_b:
  00218	5f		 pop	 edi

; 1002 : #ifdef ZLIB_DEBUG
; 1003 :         s->compressed_len += 7;  /* align on byte boundary */
; 1004 : #endif
; 1005 :     }
; 1006 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1007 :            s->compressed_len-7*last));
; 1008 : }

  00219	5e		 pop	 esi
  0021a	5b		 pop	 ebx
  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c3		 ret	 0
__tr_flush_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT __tr_init
_TEXT	SEGMENT
__tr_init PROC						; COMDAT
; _s$ = ecx

; 382  :     tr_static_init();
; 383  : 
; 384  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]

; 385  :     s->l_desc.stat_desc = &static_l_desc;

  00006	c7 81 20 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2848], OFFSET _static_l_desc
  00010	89 81 18 0b 00
	00		 mov	 DWORD PTR [ecx+2840], eax

; 386  : 
; 387  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00016	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  0001c	89 81 24 0b 00
	00		 mov	 DWORD PTR [ecx+2852], eax

; 388  :     s->d_desc.stat_desc = &static_d_desc;
; 389  : 
; 390  :     s->bl_desc.dyn_tree = s->bl_tree;

  00022	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  00028	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 391  :     s->bl_desc.stat_desc = &static_bl_desc;
; 392  : 
; 393  :     s->bi_buf = 0;

  0002e	33 c0		 xor	 eax, eax
  00030	c7 81 2c 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2860], OFFSET _static_d_desc
  0003a	c7 81 38 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2872], OFFSET _static_bl_desc
  00044	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 394  :     s->bi_valid = 0;

  0004b	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax

; 395  : #ifdef ZLIB_DEBUG
; 396  :     s->compressed_len = 0L;
; 397  :     s->bits_sent = 0L;
; 398  : #endif
; 399  : 
; 400  :     /* Initialize the first block of the first file: */
; 401  :     init_block(s);

  00051	e9 00 00 00 00	 jmp	 _init_block
__tr_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT __tr_align
_TEXT	SEGMENT
__tr_align PROC						; COMDAT
; _s$ = ecx

; 898  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 899  :     send_bits(s, STATIC_TREES<<1, 3);

  00005	bf 02 00 00 00	 mov	 edi, 2
  0000a	8b c7		 mov	 eax, edi
  0000c	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00012	66 d3 e0	 shl	 ax, cl
  00015	66 0b 86 b8 16
	00 00		 or	 ax, WORD PTR [esi+5816]
  0001c	0f b7 d8	 movzx	 ebx, ax
  0001f	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00022	7e 45		 jle	 SHORT $LN2@tr_align
  00024	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00027	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002a	66 89 9e b8 16
	00 00		 mov	 WORD PTR [esi+5816], bx
  00031	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  00034	ff 46 14	 inc	 DWORD PTR [esi+20]
  00037	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0003a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0003d	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  00043	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00046	b1 10		 mov	 cl, 16			; 00000010H
  00048	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  0004f	83 86 bc 16 00
	00 f3		 add	 DWORD PTR [esi+5820], -13 ; fffffff3H
  00056	2a c8		 sub	 cl, al
  00058	ff 46 14	 inc	 DWORD PTR [esi+20]
  0005b	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  00061	66 d3 ef	 shr	 di, cl
  00064	0f b7 c7	 movzx	 eax, di
  00067	eb 0b		 jmp	 SHORT $LN3@tr_align
$LN2@tr_align:
  00069	8d 51 03	 lea	 edx, DWORD PTR [ecx+3]
  0006c	8b c3		 mov	 eax, ebx
  0006e	89 96 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], edx
$LN3@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

  00074	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  0007b	0f b7 d8	 movzx	 ebx, ax
  0007e	83 fa 09	 cmp	 edx, 9
  00081	7e 38		 jle	 SHORT $LN4@tr_align
  00083	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00086	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 901  : #ifdef ZLIB_DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  00089	5f		 pop	 edi
  0008a	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0008d	ff 46 14	 inc	 DWORD PTR [esi+20]
  00090	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00093	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00096	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  0009c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0009f	8b ce		 mov	 ecx, esi
  000a1	ff 46 14	 inc	 DWORD PTR [esi+20]
  000a4	83 86 bc 16 00
	00 f7		 add	 DWORD PTR [esi+5820], -9 ; fffffff7H
  000ab	33 c0		 xor	 eax, eax
  000ad	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	e9 00 00 00 00	 jmp	 _bi_flush
$LN4@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

  000bb	8d 42 07	 lea	 eax, DWORD PTR [edx+7]

; 901  : #ifdef ZLIB_DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  000be	8b ce		 mov	 ecx, esi
  000c0	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  000c6	8b c3		 mov	 eax, ebx
  000c8	5f		 pop	 edi
  000c9	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	e9 00 00 00 00	 jmp	 _bi_flush
__tr_align ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _tr_static_init
_TEXT	SEGMENT
_tr_static_init PROC					; COMDAT

; 234  : #if defined(GEN_TREES_H) || !defined(STDC)
; 235  :     static int static_init_done = 0;
; 236  :     int n;        /* iterates over tree elements */
; 237  :     int bits;     /* bit counter */
; 238  :     int length;   /* length value */
; 239  :     int code;     /* code value */
; 240  :     int dist;     /* distance index */
; 241  :     ush bl_count[MAX_BITS+1];
; 242  :     /* number of codes at each bit length for an optimal tree */
; 243  : 
; 244  :     if (static_init_done) return;
; 245  : 
; 246  :     /* For some embedded targets, global variables are not initialized: */
; 247  : #ifdef NO_INIT_GLOBAL_POINTERS
; 248  :     static_l_desc.static_tree = static_ltree;
; 249  :     static_l_desc.extra_bits = extra_lbits;
; 250  :     static_d_desc.static_tree = static_dtree;
; 251  :     static_d_desc.extra_bits = extra_dbits;
; 252  :     static_bl_desc.extra_bits = extra_blbits;
; 253  : #endif
; 254  : 
; 255  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 256  :     length = 0;
; 257  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 258  :         base_length[code] = length;
; 259  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 260  :             _length_code[length++] = (uch)code;
; 261  :         }
; 262  :     }
; 263  :     Assert (length == 256, "tr_static_init: length != 256");
; 264  :     /* Note that the length 255 (match length 258) can be represented
; 265  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 266  :      * overwrite length_code[255] to use the best encoding:
; 267  :      */
; 268  :     _length_code[length-1] = (uch)code;
; 269  : 
; 270  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 271  :     dist = 0;
; 272  :     for (code = 0 ; code < 16; code++) {
; 273  :         base_dist[code] = dist;
; 274  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 275  :             _dist_code[dist++] = (uch)code;
; 276  :         }
; 277  :     }
; 278  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 279  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 280  :     for ( ; code < D_CODES; code++) {
; 281  :         base_dist[code] = dist << 7;
; 282  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 283  :             _dist_code[256 + dist++] = (uch)code;
; 284  :         }
; 285  :     }
; 286  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 287  : 
; 288  :     /* Construct the codes of the static literal tree */
; 289  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 290  :     n = 0;
; 291  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 292  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 293  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 294  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 295  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 296  :      * tree construction to get a canonical Huffman tree (longest code
; 297  :      * all ones)
; 298  :      */
; 299  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 300  : 
; 301  :     /* The static distance tree is trivial: */
; 302  :     for (n = 0; n < D_CODES; n++) {
; 303  :         static_dtree[n].Len = 5;
; 304  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 305  :     }
; 306  :     static_init_done = 1;
; 307  : 
; 308  : #  ifdef GEN_TREES_H
; 309  :     gen_trees_header();
; 310  : #  endif
; 311  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 312  : }

  00000	c3		 ret	 0
_tr_static_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _init_block
_TEXT	SEGMENT
_init_block PROC					; COMDAT
; _s$ = ecx

; 410  :     int n; /* iterates over tree elements */
; 411  : 
; 412  :     /* Initialize the trees. */
; 413  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]
  00006	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  0000b	56		 push	 esi
  0000c	0f 1f 40 00	 npad	 4
$LL4@init_block:
  00010	33 f6		 xor	 esi, esi
  00012	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00015	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00019	83 ea 01	 sub	 edx, 1
  0001c	75 f2		 jne	 SHORT $LL4@init_block

; 414  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  0001e	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  00024	ba 1e 00 00 00	 mov	 edx, 30			; 0000001eH
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@init_block:
  00030	33 f6		 xor	 esi, esi
  00032	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00035	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00039	83 ea 01	 sub	 edx, 1
  0003c	75 f2		 jne	 SHORT $LL7@init_block

; 415  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  0003e	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  00044	ba 13 00 00 00	 mov	 edx, 19			; 00000013H
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@init_block:
  00050	33 f6		 xor	 esi, esi
  00052	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00055	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00059	83 ea 01	 sub	 edx, 1
  0005c	75 f2		 jne	 SHORT $LL10@init_block

; 416  : 
; 417  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  0005e	b8 01 00 00 00	 mov	 eax, 1

; 418  :     s->opt_len = s->static_len = 0L;

  00063	89 b1 ac 16 00
	00		 mov	 DWORD PTR [ecx+5804], esi
  00069	89 b1 a8 16 00
	00		 mov	 DWORD PTR [ecx+5800], esi

; 419  :     s->last_lit = s->matches = 0;

  0006f	89 b1 b0 16 00
	00		 mov	 DWORD PTR [ecx+5808], esi
  00075	89 b1 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], esi
  0007b	66 89 81 94 04
	00 00		 mov	 WORD PTR [ecx+1172], ax
  00082	5e		 pop	 esi

; 420  : }

  00083	c3		 ret	 0
_init_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _pqdownheap
_TEXT	SEGMENT
tv387 = -12						; size = 4
_tree$1$ = -8						; size = 4
_v$1$ = -4						; size = 4
_k$ = 8							; size = 4
_pqdownheap PROC					; COMDAT
; _s$ = ecx
; _tree$ = edx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 456  :     int v = s->heap[k];
; 457  :     int j = k << 1;  /* left son of k */
; 458  :     while (j <= s->heap_len) {

  00006	8b 81 50 14 00
	00		 mov	 eax, DWORD PTR [ecx+5200]
  0000c	53		 push	 ebx
  0000d	8b 5d 08	 mov	 ebx, DWORD PTR _k$[ebp]
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 55 f8	 mov	 DWORD PTR _tree$1$[ebp], edx
  00015	8b bc 99 5c 0b
	00 00		 mov	 edi, DWORD PTR [ecx+ebx*4+2908]
  0001c	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  0001f	89 7d fc	 mov	 DWORD PTR _v$1$[ebp], edi
  00022	3b f0		 cmp	 esi, eax
  00024	0f 8f 97 00 00
	00		 jg	 $LN16@pqdownheap
  0002a	8d 3c ba	 lea	 edi, DWORD PTR [edx+edi*4]
  0002d	89 7d f4	 mov	 DWORD PTR tv387[ebp], edi
$LL2@pqdownheap:

; 459  :         /* Set j to the smallest of the two sons: */
; 460  :         if (j < s->heap_len &&

  00030	3b f0		 cmp	 esi, eax
  00032	7d 31		 jge	 SHORT $LN4@pqdownheap
  00034	8b bc b1 60 0b
	00 00		 mov	 edi, DWORD PTR [ecx+esi*4+2912]
  0003b	8b 9c b1 5c 0b
	00 00		 mov	 ebx, DWORD PTR [ecx+esi*4+2908]
  00042	0f b7 04 ba	 movzx	 eax, WORD PTR [edx+edi*4]
  00046	0f b7 14 9a	 movzx	 edx, WORD PTR [edx+ebx*4]
  0004a	66 3b c2	 cmp	 ax, dx
  0004d	72 12		 jb	 SHORT $LN5@pqdownheap
  0004f	75 11		 jne	 SHORT $LN19@pqdownheap
  00051	8a 84 0f 58 14
	00 00		 mov	 al, BYTE PTR [edi+ecx+5208]
  00058	3a 84 0b 58 14
	00 00		 cmp	 al, BYTE PTR [ebx+ecx+5208]
  0005f	77 01		 ja	 SHORT $LN19@pqdownheap
$LN5@pqdownheap:

; 461  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
; 462  :             j++;

  00061	46		 inc	 esi
$LN19@pqdownheap:

; 463  :         }
; 464  :         /* Exit if v is smaller than both sons */
; 465  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  00062	8b 5d 08	 mov	 ebx, DWORD PTR _k$[ebp]
$LN4@pqdownheap:
  00065	8b 94 b1 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+2908]
  0006c	8b 45 f4	 mov	 eax, DWORD PTR tv387[ebp]
  0006f	8b 7d f8	 mov	 edi, DWORD PTR _tree$1$[ebp]
  00072	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00075	0f b7 3c 97	 movzx	 edi, WORD PTR [edi+edx*4]
  00079	66 3b c7	 cmp	 ax, di
  0007c	72 32		 jb	 SHORT $LN15@pqdownheap
  0007e	8b 7d fc	 mov	 edi, DWORD PTR _v$1$[ebp]
  00081	75 10		 jne	 SHORT $LN6@pqdownheap
  00083	8a 84 0f 58 14
	00 00		 mov	 al, BYTE PTR [edi+ecx+5208]
  0008a	3a 84 0a 58 14
	00 00		 cmp	 al, BYTE PTR [edx+ecx+5208]
  00091	76 2e		 jbe	 SHORT $LN16@pqdownheap
$LN6@pqdownheap:

; 466  : 
; 467  :         /* Exchange v with the smallest son */
; 468  :         s->heap[k] = s->heap[j];  k = j;

  00093	89 94 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], edx
  0009a	8b de		 mov	 ebx, esi
  0009c	8b 81 50 14 00
	00		 mov	 eax, DWORD PTR [ecx+5200]

; 469  : 
; 470  :         /* And continue down the tree, setting j to the left son of k */
; 471  :         j <<= 1;

  000a2	03 f6		 add	 esi, esi
  000a4	89 5d 08	 mov	 DWORD PTR _k$[ebp], ebx
  000a7	3b f0		 cmp	 esi, eax
  000a9	7f 16		 jg	 SHORT $LN16@pqdownheap

; 456  :     int v = s->heap[k];
; 457  :     int j = k << 1;  /* left son of k */
; 458  :     while (j <= s->heap_len) {

  000ab	8b 55 f8	 mov	 edx, DWORD PTR _tree$1$[ebp]
  000ae	eb 80		 jmp	 SHORT $LL2@pqdownheap
$LN15@pqdownheap:

; 472  :     }
; 473  :     s->heap[k] = v;

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _v$1$[ebp]
  000b3	5f		 pop	 edi

; 474  : }

  000b4	5e		 pop	 esi
  000b5	89 84 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], eax
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
$LN16@pqdownheap:
  000c1	89 bc 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], edi
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_pqdownheap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _gen_bitlen
_TEXT	SEGMENT
tv861 = -52						; size = 4
tv852 = -52						; size = 4
_stree$1$ = -48						; size = 4
_extra$1$ = -44						; size = 4
tv864 = -40						; size = 4
tv867 = -36						; size = 4
_h$2$ = -36						; size = 4
tv840 = -32						; size = 4
tv836 = -32						; size = 4
tv860 = -28						; size = 4
_base$1$ = -24						; size = 4
_max_code$1$ = -20					; size = 4
_s$1$ = -16						; size = 4
_overflow$2$ = -12					; size = 4
_bits$2$ = -8						; size = 4
_tree$1$ = -4						; size = 4
_gen_bitlen PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 490  :     ct_data *tree        = desc->dyn_tree;
; 491  :     int max_code         = desc->max_code;

  00006	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	89 45 ec	 mov	 DWORD PTR _max_code$1$[ebp], eax

; 492  :     const ct_data *stree = desc->stat_desc->static_tree;

  0000f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00012	53		 push	 ebx
  00013	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00015	56		 push	 esi
  00016	8b 10		 mov	 edx, DWORD PTR [eax]

; 493  :     const intf *extra    = desc->stat_desc->extra_bits;
; 494  :     int base             = desc->stat_desc->extra_base;
; 495  :     int max_length       = desc->stat_desc->max_length;

  00018	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  0001b	89 55 d0	 mov	 DWORD PTR _stree$1$[ebp], edx
  0001e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00021	89 55 d4	 mov	 DWORD PTR _extra$1$[ebp], edx
  00024	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00027	0f 11 81 3c 0b
	00 00		 movups	 XMMWORD PTR [ecx+2876], xmm0
  0002e	89 55 e8	 mov	 DWORD PTR _base$1$[ebp], edx

; 496  :     int h;              /* heap index */
; 497  :     int n, m;           /* iterate over the tree elements */
; 498  :     int bits;           /* bit length */
; 499  :     int xbits;          /* extra bits */
; 500  :     ush f;              /* frequency */
; 501  :     int overflow = 0;   /* number of elements with bit length too large */
; 502  : 
; 503  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
; 504  : 
; 505  :     /* In a first pass, compute the optimal bit lengths (which may
; 506  :      * overflow in the case of the bit length tree).
; 507  :      */
; 508  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00031	33 d2		 xor	 edx, edx
  00033	0f 11 81 4c 0b
	00 00		 movups	 XMMWORD PTR [ecx+2892], xmm0
  0003a	8b 81 54 14 00
	00		 mov	 eax, DWORD PTR [ecx+5204]
  00040	89 5d fc	 mov	 DWORD PTR _tree$1$[ebp], ebx
  00043	57		 push	 edi
  00044	33 ff		 xor	 edi, edi
  00046	89 4d f0	 mov	 DWORD PTR _s$1$[ebp], ecx
  00049	8b 84 81 5c 0b
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+2908]
  00050	89 75 f8	 mov	 DWORD PTR _bits$2$[ebp], esi
  00053	66 89 54 83 02	 mov	 WORD PTR [ebx+eax*4+2], dx

; 509  : 
; 510  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00058	8b 99 54 14 00
	00		 mov	 ebx, DWORD PTR [ecx+5204]
  0005e	43		 inc	 ebx
  0005f	81 fb 3d 02 00
	00		 cmp	 ebx, 573		; 0000023dH
  00065	0f 8d 96 01 00
	00		 jge	 $LN14@gen_bitlen

; 496  :     int h;              /* heap index */
; 497  :     int n, m;           /* iterate over the tree elements */
; 498  :     int bits;           /* bit length */
; 499  :     int xbits;          /* extra bits */
; 500  :     ush f;              /* frequency */
; 501  :     int overflow = 0;   /* number of elements with bit length too large */
; 502  : 
; 503  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
; 504  : 
; 505  :     /* In a first pass, compute the optimal bit lengths (which may
; 506  :      * overflow in the case of the bit length tree).
; 507  :      */
; 508  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  0006b	8d 91 5c 0b 00
	00		 lea	 edx, DWORD PTR [ecx+2908]
  00071	b8 3d 02 00 00	 mov	 eax, 573		; 0000023dH
  00076	8d 14 9a	 lea	 edx, DWORD PTR [edx+ebx*4]
  00079	2b c3		 sub	 eax, ebx
  0007b	8b 5d ec	 mov	 ebx, DWORD PTR _max_code$1$[ebp]
  0007e	89 55 e0	 mov	 DWORD PTR tv840[ebp], edx
  00081	89 45 dc	 mov	 DWORD PTR tv867[ebp], eax
$LL7@gen_bitlen:

; 511  :         n = s->heap[h];

  00084	8b 12		 mov	 edx, DWORD PTR [edx]

; 512  :         bits = tree[tree[n].Dad].Len + 1;

  00086	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  00089	8d 04 95 00 00
	00 00		 lea	 eax, DWORD PTR [edx*4]
  00090	89 45 cc	 mov	 DWORD PTR tv861[ebp], eax
  00093	03 c1		 add	 eax, ecx
  00095	89 45 e4	 mov	 DWORD PTR tv860[ebp], eax
  00098	0f b7 40 02	 movzx	 eax, WORD PTR [eax+2]
  0009c	0f b7 4c 81 02	 movzx	 ecx, WORD PTR [ecx+eax*4+2]

; 513  :         if (bits > max_length) bits = max_length, overflow++;
; 514  :         tree[n].Len = (ush)bits;

  000a1	8b c6		 mov	 eax, esi
  000a3	41		 inc	 ecx
  000a4	3b ce		 cmp	 ecx, esi
  000a6	0f 4e c1	 cmovle	 eax, ecx
  000a9	8b 4d e4	 mov	 ecx, DWORD PTR tv860[ebp]
  000ac	89 45 d8	 mov	 DWORD PTR tv864[ebp], eax
  000af	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000b2	0f 4e c7	 cmovle	 eax, edi
  000b5	8b f8		 mov	 edi, eax
  000b7	8b 45 d8	 mov	 eax, DWORD PTR tv864[ebp]
  000ba	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 515  :         /* We overwrite tree[n].Dad which is no longer needed */
; 516  : 
; 517  :         if (n > max_code) continue; /* not a leaf node */

  000be	8b 4d f0	 mov	 ecx, DWORD PTR _s$1$[ebp]
  000c1	89 7d f4	 mov	 DWORD PTR _overflow$2$[ebp], edi
  000c4	3b d3		 cmp	 edx, ebx
  000c6	7f 49		 jg	 SHORT $LN5@gen_bitlen

; 518  : 
; 519  :         s->bl_count[bits]++;

  000c8	66 ff 84 41 3c
	0b 00 00	 inc	 WORD PTR [ecx+eax*2+2876]

; 520  :         xbits = 0;

  000d0	33 ff		 xor	 edi, edi

; 521  :         if (n >= base) xbits = extra[n-base];

  000d2	3b 55 e8	 cmp	 edx, DWORD PTR _base$1$[ebp]
  000d5	7c 09		 jl	 SHORT $LN20@gen_bitlen
  000d7	2b 55 e8	 sub	 edx, DWORD PTR _base$1$[ebp]
  000da	8b 7d d4	 mov	 edi, DWORD PTR _extra$1$[ebp]
  000dd	8b 3c 97	 mov	 edi, DWORD PTR [edi+edx*4]
$LN20@gen_bitlen:

; 522  :         f = tree[n].Freq;
; 523  :         s->opt_len += (ulg)f * (unsigned)(bits + xbits);

  000e0	8b 55 e4	 mov	 edx, DWORD PTR tv860[ebp]
  000e3	03 c7		 add	 eax, edi
  000e5	0f b7 12	 movzx	 edx, WORD PTR [edx]
  000e8	0f af c2	 imul	 eax, edx
  000eb	01 81 a8 16 00
	00		 add	 DWORD PTR [ecx+5800], eax

; 524  :         if (stree) s->static_len += (ulg)f * (unsigned)(stree[n].Len + xbits);

  000f1	8b 45 d0	 mov	 eax, DWORD PTR _stree$1$[ebp]
  000f4	85 c0		 test	 eax, eax
  000f6	74 16		 je	 SHORT $LN51@gen_bitlen
  000f8	8b 75 cc	 mov	 esi, DWORD PTR tv861[ebp]
  000fb	0f b7 44 06 02	 movzx	 eax, WORD PTR [esi+eax+2]
  00100	8b 75 f8	 mov	 esi, DWORD PTR _bits$2$[ebp]
  00103	03 c7		 add	 eax, edi
  00105	0f af c2	 imul	 eax, edx
  00108	01 81 ac 16 00
	00		 add	 DWORD PTR [ecx+5804], eax
$LN51@gen_bitlen:

; 509  : 
; 510  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  0010e	8b 7d f4	 mov	 edi, DWORD PTR _overflow$2$[ebp]
$LN5@gen_bitlen:
  00111	8b 55 e0	 mov	 edx, DWORD PTR tv840[ebp]
  00114	83 c2 04	 add	 edx, 4
  00117	83 6d dc 01	 sub	 DWORD PTR tv867[ebp], 1
  0011b	89 55 e0	 mov	 DWORD PTR tv840[ebp], edx
  0011e	0f 85 60 ff ff
	ff		 jne	 $LL7@gen_bitlen

; 525  :     }
; 526  :     if (overflow == 0) return;

  00124	85 ff		 test	 edi, edi
  00126	0f 84 d5 00 00
	00		 je	 $LN14@gen_bitlen
  0012c	8b 5d f4	 mov	 ebx, DWORD PTR _overflow$2$[ebp]
  0012f	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00132	81 c6 9e 05 00
	00		 add	 esi, 1438		; 0000059eH
  00138	89 45 cc	 mov	 DWORD PTR tv852[ebp], eax
  0013b	8d 3c 71	 lea	 edi, DWORD PTR [ecx+esi*2]
  0013e	8b f0		 mov	 esi, eax
  00140	89 7d e0	 mov	 DWORD PTR tv836[ebp], edi
$LL10@gen_bitlen:

; 527  : 
; 528  :     Tracev((stderr,"\nbit length overflow\n"));
; 529  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 530  : 
; 531  :     /* Find the first bit length which could increase: */
; 532  :     do {
; 533  :         bits = max_length-1;

  00143	8b d6		 mov	 edx, esi

; 534  :         while (s->bl_count[bits] == 0) bits--;

  00145	8d 82 9e 05 00
	00		 lea	 eax, DWORD PTR [edx+1438]
  0014b	66 83 3c 41 00	 cmp	 WORD PTR [ecx+eax*2], 0
  00150	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00153	75 0a		 jne	 SHORT $LN12@gen_bitlen
$LL11@gen_bitlen:
  00155	8d 40 fe	 lea	 eax, DWORD PTR [eax-2]
  00158	4a		 dec	 edx
  00159	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0015d	74 f6		 je	 SHORT $LL11@gen_bitlen
$LN12@gen_bitlen:

; 535  :         s->bl_count[bits]--;      /* move one leaf down the tree */
; 536  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  0015f	66 83 84 51 3e
	0b 00 00 02	 add	 WORD PTR [ecx+edx*2+2878], 2
  00168	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0016d	66 01 84 51 3c
	0b 00 00	 add	 WORD PTR [ecx+edx*2+2876], ax

; 537  :         s->bl_count[max_length]--;
; 538  :         /* The brother of the overflow item also moves one step up,
; 539  :          * but this does not affect bl_count[max_length]
; 540  :          */
; 541  :         overflow -= 2;

  00175	83 eb 02	 sub	 ebx, 2
  00178	66 01 07	 add	 WORD PTR [edi], ax

; 542  :     } while (overflow > 0);

  0017b	85 db		 test	 ebx, ebx
  0017d	7f c4		 jg	 SHORT $LL10@gen_bitlen

; 543  : 
; 544  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 545  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 546  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 547  :      * from 'ar' written by Haruhiko Okumura.)
; 548  :      */
; 549  :     for (bits = max_length; bits != 0; bits--) {

  0017f	8b 75 f8	 mov	 esi, DWORD PTR _bits$2$[ebp]
  00182	bb 3d 02 00 00	 mov	 ebx, 573		; 0000023dH
  00187	85 f6		 test	 esi, esi
  00189	74 76		 je	 SHORT $LN14@gen_bitlen
  0018b	0f 1f 44 00 00	 npad	 5
$LL15@gen_bitlen:

; 550  :         n = s->bl_count[bits];

  00190	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 551  :         while (n != 0) {

  00193	85 c0		 test	 eax, eax
  00195	74 5c		 je	 SHORT $LN13@gen_bitlen

; 550  :         n = s->bl_count[bits];

  00197	8b 55 ec	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  0019a	8d bb d7 02 00
	00		 lea	 edi, DWORD PTR [ebx+727]
  001a0	8d 3c b9	 lea	 edi, DWORD PTR [ecx+edi*4]
$LL16@gen_bitlen:

; 552  :             m = s->heap[--h];

  001a3	4b		 dec	 ebx
  001a4	8d 7f fc	 lea	 edi, DWORD PTR [edi-4]
  001a7	89 5d dc	 mov	 DWORD PTR _h$2$[ebp], ebx
  001aa	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 553  :             if (m > max_code) continue;

  001ac	3b da		 cmp	 ebx, edx
  001ae	7f 39		 jg	 SHORT $LN36@gen_bitlen

; 554  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  001b0	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  001b3	0f b7 54 9a 02	 movzx	 edx, WORD PTR [edx+ebx*4+2]
  001b8	3b d6		 cmp	 edx, esi
  001ba	74 29		 je	 SHORT $LN24@gen_bitlen

; 555  :                 Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 556  :                 s->opt_len += ((ulg)bits - tree[m].Len) * tree[m].Freq;

  001bc	8b d6		 mov	 edx, esi
  001be	8b 75 fc	 mov	 esi, DWORD PTR _tree$1$[ebp]
  001c1	0f b7 4c 9e 02	 movzx	 ecx, WORD PTR [esi+ebx*4+2]
  001c6	2b d1		 sub	 edx, ecx
  001c8	8b ce		 mov	 ecx, esi

; 557  :                 tree[m].Len = (ush)bits;

  001ca	8b 75 f8	 mov	 esi, DWORD PTR _bits$2$[ebp]
  001cd	0f b7 0c 99	 movzx	 ecx, WORD PTR [ecx+ebx*4]
  001d1	0f af d1	 imul	 edx, ecx
  001d4	8b 4d f0	 mov	 ecx, DWORD PTR _s$1$[ebp]
  001d7	01 91 a8 16 00
	00		 add	 DWORD PTR [ecx+5800], edx
  001dd	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  001e0	66 89 74 9a 02	 mov	 WORD PTR [edx+ebx*4+2], si
$LN24@gen_bitlen:

; 558  :             }
; 559  :             n--;

  001e5	8b 55 ec	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  001e8	48		 dec	 eax
$LN36@gen_bitlen:

; 551  :         while (n != 0) {

  001e9	8b 5d dc	 mov	 ebx, DWORD PTR _h$2$[ebp]
  001ec	85 c0		 test	 eax, eax
  001ee	75 b3		 jne	 SHORT $LL16@gen_bitlen
  001f0	8b 7d e0	 mov	 edi, DWORD PTR tv836[ebp]
$LN13@gen_bitlen:

; 543  : 
; 544  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 545  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 546  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 547  :      * from 'ar' written by Haruhiko Okumura.)
; 548  :      */
; 549  :     for (bits = max_length; bits != 0; bits--) {

  001f3	4e		 dec	 esi
  001f4	83 ef 02	 sub	 edi, 2
  001f7	89 75 f8	 mov	 DWORD PTR _bits$2$[ebp], esi
  001fa	89 7d e0	 mov	 DWORD PTR tv836[ebp], edi
  001fd	85 f6		 test	 esi, esi
  001ff	75 8f		 jne	 SHORT $LL15@gen_bitlen
$LN14@gen_bitlen:
  00201	5f		 pop	 edi

; 560  :         }
; 561  :     }
; 562  : }

  00202	5e		 pop	 esi
  00203	5b		 pop	 ebx
  00204	8b e5		 mov	 esp, ebp
  00206	5d		 pop	 ebp
  00207	c3		 ret	 0
_gen_bitlen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _gen_codes
_TEXT	SEGMENT
_next_code$ = -36					; size = 32
_tree$1$ = -4						; size = 4
_bl_count$ = 8						; size = 4
_gen_codes PROC						; COMDAT
; _tree$ = ecx
; _max_code$ = edx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b da		 mov	 ebx, edx
  0000a	89 4d fc	 mov	 DWORD PTR _tree$1$[ebp], ecx

; 577  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 578  :     unsigned code = 0;         /* running code value */

  0000d	8b 55 08	 mov	 edx, DWORD PTR _bl_count$[ebp]
  00010	8d 45 de	 lea	 eax, DWORD PTR _next_code$[ebp+2]
  00013	57		 push	 edi
  00014	33 ff		 xor	 edi, edi
  00016	be 01 00 00 00	 mov	 esi, 1
  0001b	2b d0		 sub	 edx, eax
  0001d	0f 1f 00	 npad	 3
$LL14@gen_codes:

; 579  :     int bits;                  /* bit index */
; 580  :     int n;                     /* code index */
; 581  : 
; 582  :     /* The distribution counts are first used to generate the code values
; 583  :      * without bit reversal.
; 584  :      */
; 585  :     for (bits = 1; bits <= MAX_BITS; bits++) {
; 586  :         code = (code + bl_count[bits-1]) << 1;

  00020	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  00023	0f b7 44 05 dc	 movzx	 eax, WORD PTR _next_code$[ebp+eax]
  00028	03 f8		 add	 edi, eax
  0002a	03 ff		 add	 edi, edi

; 587  :         next_code[bits] = (ush)code;

  0002c	66 89 7c 75 dc	 mov	 WORD PTR _next_code$[ebp+esi*2], di
  00031	46		 inc	 esi
  00032	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00035	7e e9		 jle	 SHORT $LL14@gen_codes

; 588  :     }
; 589  :     /* Check that the bit counts in bl_count are consistent. The last code
; 590  :      * must be all ones.
; 591  :      */
; 592  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 593  :             "inconsistent bit counts");
; 594  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 595  : 
; 596  :     for (n = 0;  n <= max_code; n++) {

  00037	33 f6		 xor	 esi, esi
  00039	85 db		 test	 ebx, ebx
  0003b	78 2a		 js	 SHORT $LN6@gen_codes
  0003d	0f 1f 00	 npad	 3
$LL7@gen_codes:

; 597  :         int len = tree[n].Len;

  00040	0f b7 54 b1 02	 movzx	 edx, WORD PTR [ecx+esi*4+2]

; 598  :         if (len == 0) continue;

  00045	85 d2		 test	 edx, edx
  00047	74 19		 je	 SHORT $LN5@gen_codes

; 599  :         /* Now reverse the bits */
; 600  :         tree[n].Code = (ush)bi_reverse(next_code[len]++, len);

  00049	0f b7 4c 55 dc	 movzx	 ecx, WORD PTR _next_code$[ebp+edx*2]
  0004e	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00051	66 89 44 55 dc	 mov	 WORD PTR _next_code$[ebp+edx*2], ax
  00056	e8 00 00 00 00	 call	 _bi_reverse
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  0005e	66 89 04 b1	 mov	 WORD PTR [ecx+esi*4], ax
$LN5@gen_codes:

; 588  :     }
; 589  :     /* Check that the bit counts in bl_count are consistent. The last code
; 590  :      * must be all ones.
; 591  :      */
; 592  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 593  :             "inconsistent bit counts");
; 594  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 595  : 
; 596  :     for (n = 0;  n <= max_code; n++) {

  00062	46		 inc	 esi
  00063	3b f3		 cmp	 esi, ebx
  00065	7e d9		 jle	 SHORT $LL7@gen_codes
$LN6@gen_codes:
  00067	5f		 pop	 edi

; 601  : 
; 602  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 603  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 604  :     }
; 605  : }

  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_gen_codes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _build_tree
_TEXT	SEGMENT
_stree$1$ = -24						; size = 4
_desc$1$ = -20						; size = 4
tv775 = -16						; size = 4
_n$3$ = -16						; size = 4
_max_code$1$ = -12					; size = 4
_node$2$ = -8						; size = 4
_tree$1$ = -4						; size = 4
_build_tree PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	8b c2		 mov	 eax, edx

; 619  :     ct_data *tree         = desc->dyn_tree;
; 620  :     const ct_data *stree  = desc->stat_desc->static_tree;
; 621  :     int elems             = desc->stat_desc->elems;
; 622  :     int n, m;          /* iterate over heap elements */
; 623  :     int max_code = -1; /* largest code with non zero frequency */

  00008	83 ca ff	 or	 edx, -1
  0000b	53		 push	 ebx
  0000c	89 45 ec	 mov	 DWORD PTR _desc$1$[ebp], eax
  0000f	56		 push	 esi
  00010	8b 18		 mov	 ebx, DWORD PTR [eax]
  00012	8b f1		 mov	 esi, ecx
  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	57		 push	 edi
  00018	89 5d fc	 mov	 DWORD PTR _tree$1$[ebp], ebx
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00020	33 c0		 xor	 eax, eax
  00022	89 4d e8	 mov	 DWORD PTR _stree$1$[ebp], ecx
  00025	33 c9		 xor	 ecx, ecx
  00027	89 7d f8	 mov	 DWORD PTR _node$2$[ebp], edi

; 624  :     int node;          /* new node being created */
; 625  : 
; 626  :     /* Construct the initial heap, with least frequent element in
; 627  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 628  :      * heap[0] is not used.
; 629  :      */
; 630  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  0002a	c7 86 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5200], 0
  00034	c7 86 54 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [esi+5204], 573 ; 0000023dH

; 631  : 
; 632  :     for (n = 0; n < elems; n++) {

  0003e	85 ff		 test	 edi, edi
  00040	7e 40		 jle	 SHORT $LL5@build_tree
$LL4@build_tree:

; 633  :         if (tree[n].Freq != 0) {

  00042	66 83 3c 8b 00	 cmp	 WORD PTR [ebx+ecx*4], 0
  00047	74 1f		 je	 SHORT $LN13@build_tree

; 634  :             s->heap[++(s->heap_len)] = max_code = n;

  00049	ff 86 50 14 00
	00		 inc	 DWORD PTR [esi+5200]
  0004f	8b d1		 mov	 edx, ecx
  00051	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  00057	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 635  :             s->depth[n] = 0;

  0005e	c6 84 0e 58 14
	00 00 00	 mov	 BYTE PTR [esi+ecx+5208], 0

; 636  :         } else {

  00066	eb 07		 jmp	 SHORT $LN2@build_tree
$LN13@build_tree:

; 637  :             tree[n].Len = 0;

  00068	33 c0		 xor	 eax, eax
  0006a	66 89 44 8b 02	 mov	 WORD PTR [ebx+ecx*4+2], ax
$LN2@build_tree:

; 631  : 
; 632  :     for (n = 0; n < elems; n++) {

  0006f	41		 inc	 ecx
  00070	3b cf		 cmp	 ecx, edi
  00072	7c ce		 jl	 SHORT $LL4@build_tree

; 638  :         }
; 639  :     }
; 640  : 
; 641  :     /* The pkzip format requires that at least one distance code exists,
; 642  :      * and that at least one bit should be sent even if there is only one
; 643  :      * possible code. So to avoid special checks later on we force at least
; 644  :      * two codes of non zero frequency.
; 645  :      */
; 646  :     while (s->heap_len < 2) {

  00074	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  0007a	89 55 f4	 mov	 DWORD PTR _max_code$1$[ebp], edx
  0007d	83 f8 02	 cmp	 eax, 2
  00080	7d 5d		 jge	 SHORT $LN6@build_tree
$LL5@build_tree:

; 647  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  00082	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  00085	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv775[ebp], 0
  0008c	83 fa 02	 cmp	 edx, 2
  0008f	8b f9		 mov	 edi, ecx
  00091	0f 4d 4d f0	 cmovge	 ecx, DWORD PTR tv775[ebp]
  00095	0f 4d fa	 cmovge	 edi, edx
  00098	40		 inc	 eax
  00099	89 86 50 14 00
	00		 mov	 DWORD PTR [esi+5200], eax
  0009f	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 648  :         tree[node].Freq = 1;

  000a6	b8 01 00 00 00	 mov	 eax, 1
  000ab	66 89 04 8b	 mov	 WORD PTR [ebx+ecx*4], ax

; 649  :         s->depth[node] = 0;
; 650  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  000af	8b 45 e8	 mov	 eax, DWORD PTR _stree$1$[ebp]
  000b2	c6 84 31 58 14
	00 00 00	 mov	 BYTE PTR [ecx+esi+5208], 0
  000ba	ff 8e a8 16 00
	00		 dec	 DWORD PTR [esi+5800]
  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN15@build_tree
  000c4	0f b7 44 88 02	 movzx	 eax, WORD PTR [eax+ecx*4+2]
  000c9	29 86 ac 16 00
	00		 sub	 DWORD PTR [esi+5804], eax
$LN15@build_tree:

; 638  :         }
; 639  :     }
; 640  : 
; 641  :     /* The pkzip format requires that at least one distance code exists,
; 642  :      * and that at least one bit should be sent even if there is only one
; 643  :      * possible code. So to avoid special checks later on we force at least
; 644  :      * two codes of non zero frequency.
; 645  :      */
; 646  :     while (s->heap_len < 2) {

  000cf	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  000d5	8b d7		 mov	 edx, edi
  000d7	83 f8 02	 cmp	 eax, 2
  000da	7c a6		 jl	 SHORT $LL5@build_tree
  000dc	89 7d f4	 mov	 DWORD PTR _max_code$1$[ebp], edi
$LN6@build_tree:

; 651  :         /* node is 0 or 1 so it does not have extra bits */
; 652  :     }
; 653  :     desc->max_code = max_code;

  000df	8b 45 ec	 mov	 eax, DWORD PTR _desc$1$[ebp]
  000e2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 654  : 
; 655  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 656  :      * establish sub-heaps of increasing lengths:
; 657  :      */
; 658  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  000e5	8b 8e 50 14 00
	00		 mov	 ecx, DWORD PTR [esi+5200]
  000eb	8b c1		 mov	 eax, ecx
  000ed	99		 cdq
  000ee	2b c2		 sub	 eax, edx
  000f0	8b d1		 mov	 edx, ecx
  000f2	8b f8		 mov	 edi, eax
  000f4	d1 ff		 sar	 edi, 1
  000f6	83 ff 01	 cmp	 edi, 1
  000f9	7c 25		 jl	 SHORT $LL12@build_tree
  000fb	0f 1f 44 00 00	 npad	 5
$LL9@build_tree:
  00100	57		 push	 edi
  00101	8b d3		 mov	 edx, ebx
  00103	8b ce		 mov	 ecx, esi
  00105	e8 00 00 00 00	 call	 _pqdownheap
  0010a	4f		 dec	 edi
  0010b	83 c4 04	 add	 esp, 4
  0010e	83 ff 01	 cmp	 edi, 1
  00111	7d ed		 jge	 SHORT $LL9@build_tree
  00113	8b 8e 50 14 00
	00		 mov	 ecx, DWORD PTR [esi+5200]
  00119	8b d1		 mov	 edx, ecx
  0011b	0f 1f 44 00 00	 npad	 5
$LL12@build_tree:

; 659  : 
; 660  :     /* Construct the Huffman tree by repeatedly combining the least two
; 661  :      * frequent nodes.
; 662  :      */
; 663  :     node = elems;              /* next internal node of the tree */
; 664  :     do {
; 665  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00120	8b 84 8e 5c 0b
	00 00		 mov	 eax, DWORD PTR [esi+ecx*4+2908]
  00127	8b ce		 mov	 ecx, esi
  00129	8b 9e 60 0b 00
	00		 mov	 ebx, DWORD PTR [esi+2912]
  0012f	89 86 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], eax
  00135	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00138	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  0013b	6a 01		 push	 1
  0013d	89 5d f0	 mov	 DWORD PTR _n$3$[ebp], ebx
  00140	89 86 50 14 00
	00		 mov	 DWORD PTR [esi+5200], eax
  00146	e8 00 00 00 00	 call	 _pqdownheap

; 666  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */
; 667  : 
; 668  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  0014b	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  00151	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]
  00157	8b 8e 60 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2912]

; 669  :         s->heap[--(s->heap_max)] = m;
; 670  : 
; 671  :         /* Create a new node father of n and m */
; 672  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  0015d	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  00160	8d 3c 8a	 lea	 edi, DWORD PTR [edx+ecx*4]
  00163	89 9c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ebx
  0016a	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  00170	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]

; 673  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 674  :                                 s->depth[n] : s->depth[m]) + 1);
; 675  :         tree[n].Dad = tree[m].Dad = (ush)node;
; 676  : #ifdef DUMP_BL_TREE
; 677  :         if (tree == s->bl_tree) {
; 678  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 679  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 680  :         }
; 681  : #endif
; 682  :         /* and insert the new node in the heap */
; 683  :         s->heap[SMALLEST] = node++;
; 684  :         pqdownheap(s, tree, SMALLEST);

  00176	6a 01		 push	 1
  00178	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx
  0017f	66 8b 07	 mov	 ax, WORD PTR [edi]
  00182	66 03 04 9a	 add	 ax, WORD PTR [edx+ebx*4]
  00186	8b 5d f8	 mov	 ebx, DWORD PTR _node$2$[ebp]
  00189	66 89 04 9a	 mov	 WORD PTR [edx+ebx*4], ax
  0018d	8a 8c 31 58 14
	00 00		 mov	 cl, BYTE PTR [ecx+esi+5208]
  00194	8b 5d f0	 mov	 ebx, DWORD PTR _n$3$[ebp]
  00197	0f b6 c1	 movzx	 eax, cl
  0019a	8a 94 33 58 14
	00 00		 mov	 dl, BYTE PTR [ebx+esi+5208]
  001a1	3a d1		 cmp	 dl, cl
  001a3	0f b6 da	 movzx	 ebx, dl
  001a6	8b 55 f8	 mov	 edx, DWORD PTR _node$2$[ebp]
  001a9	8b 4d f0	 mov	 ecx, DWORD PTR _n$3$[ebp]
  001ac	0f 42 d8	 cmovb	 ebx, eax
  001af	fe c3		 inc	 bl
  001b1	0f b7 c2	 movzx	 eax, dx
  001b4	88 9c 16 58 14
	00 00		 mov	 BYTE PTR [esi+edx+5208], bl
  001bb	8b 5d fc	 mov	 ebx, DWORD PTR _tree$1$[ebp]
  001be	66 89 47 02	 mov	 WORD PTR [edi+2], ax
  001c2	66 89 44 8b 02	 mov	 WORD PTR [ebx+ecx*4+2], ax
  001c7	8b ce		 mov	 ecx, esi
  001c9	89 96 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], edx
  001cf	42		 inc	 edx
  001d0	89 55 f8	 mov	 DWORD PTR _node$2$[ebp], edx
  001d3	8b d3		 mov	 edx, ebx
  001d5	e8 00 00 00 00	 call	 _pqdownheap

; 685  : 
; 686  :     } while (s->heap_len >= 2);

  001da	8b 8e 50 14 00
	00		 mov	 ecx, DWORD PTR [esi+5200]
  001e0	83 c4 08	 add	 esp, 8
  001e3	8b d1		 mov	 edx, ecx
  001e5	83 f9 02	 cmp	 ecx, 2
  001e8	0f 8d 32 ff ff
	ff		 jge	 $LL12@build_tree

; 687  : 
; 688  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  001ee	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]

; 689  : 
; 690  :     /* At this point, the fields freq and dad are set. We can now
; 691  :      * generate the bit lengths.
; 692  :      */
; 693  :     gen_bitlen(s, (tree_desc *)desc);

  001f4	8b ce		 mov	 ecx, esi
  001f6	8b be 54 14 00
	00		 mov	 edi, DWORD PTR [esi+5204]
  001fc	8b 86 60 0b 00
	00		 mov	 eax, DWORD PTR [esi+2912]
  00202	8b 55 ec	 mov	 edx, DWORD PTR _desc$1$[ebp]
  00205	89 84 be 5c 0b
	00 00		 mov	 DWORD PTR [esi+edi*4+2908], eax
  0020c	e8 00 00 00 00	 call	 _gen_bitlen

; 694  : 
; 695  :     /* The field len is now set, we can generate the bit codes */
; 696  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  00211	8b 55 f4	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  00214	81 c6 3c 0b 00
	00		 add	 esi, 2876		; 00000b3cH
  0021a	56		 push	 esi
  0021b	8b cb		 mov	 ecx, ebx
  0021d	e8 00 00 00 00	 call	 _gen_codes
  00222	83 c4 04	 add	 esp, 4
  00225	5f		 pop	 edi
  00226	5e		 pop	 esi
  00227	5b		 pop	 ebx

; 697  : }

  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c3		 ret	 0
_build_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _scan_tree
_TEXT	SEGMENT
tv360 = -12						; size = 4
_prevlen$1$ = -8					; size = 4
tv352 = -4						; size = 4
tv349 = -4						; size = 4
tv358 = 8						; size = 4
_max_code$ = 8						; size = 4
_scan_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx

; 708  :     int n;                     /* iterates over all tree elements */
; 709  :     int prevlen = -1;          /* last emitted length */

  0000a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _prevlen$1$[ebp], -1
  00011	57		 push	 edi

; 710  :     int curlen;                /* length of current code */
; 711  :     int nextlen = tree[0].Len; /* length of next code */
; 712  :     int count = 0;             /* repeat count of the current code */
; 713  :     int max_count = 7;         /* max repeat count */
; 714  :     int min_count = 4;         /* min repeat count */
; 715  : 
; 716  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 717  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00012	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH
  00017	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0001b	8b d0		 mov	 edx, eax
  0001d	8b d8		 mov	 ebx, eax
  0001f	89 55 fc	 mov	 DWORD PTR tv349[ebp], edx
  00022	33 c0		 xor	 eax, eax
  00024	8b 55 08	 mov	 edx, DWORD PTR _max_code$[ebp]
  00027	66 89 7c 96 06	 mov	 WORD PTR [esi+edx*4+6], di

; 718  : 
; 719  :     for (n = 0; n <= max_code; n++) {

  0002c	85 d2		 test	 edx, edx
  0002e	0f 88 b7 00 00
	00		 js	 $LN3@scan_tree

; 710  :     int curlen;                /* length of current code */
; 711  :     int nextlen = tree[0].Len; /* length of next code */
; 712  :     int count = 0;             /* repeat count of the current code */
; 713  :     int max_count = 7;         /* max repeat count */
; 714  :     int min_count = 4;         /* min repeat count */
; 715  : 
; 716  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 717  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00034	66 3b d8	 cmp	 bx, ax
  00037	ba 07 00 00 00	 mov	 edx, 7
  0003c	bf 8a 00 00 00	 mov	 edi, 138		; 0000008aH
  00041	0f 45 fa	 cmovne	 edi, edx
  00044	33 d2		 xor	 edx, edx
  00046	66 3b d8	 cmp	 bx, ax
  00049	0f 95 c2	 setne	 dl
  0004c	83 c6 06	 add	 esi, 6
  0004f	89 75 fc	 mov	 DWORD PTR tv352[ebp], esi
  00052	83 c2 03	 add	 edx, 3
  00055	8b 75 08	 mov	 esi, DWORD PTR _max_code$[ebp]
  00058	46		 inc	 esi
  00059	89 75 f4	 mov	 DWORD PTR tv360[ebp], esi
  0005c	0f 1f 40 00	 npad	 4
$LL4@scan_tree:

; 720  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00060	89 5d 08	 mov	 DWORD PTR tv358[ebp], ebx
  00063	8b f3		 mov	 esi, ebx
  00065	8b 5d fc	 mov	 ebx, DWORD PTR tv352[ebp]

; 721  :         if (++count < max_count && curlen == nextlen) {

  00068	40		 inc	 eax
  00069	0f b7 1b	 movzx	 ebx, WORD PTR [ebx]
  0006c	3b c7		 cmp	 eax, edi
  0006e	7d 04		 jge	 SHORT $LN6@scan_tree
  00070	3b f3		 cmp	 esi, ebx
  00072	74 69		 je	 SHORT $LN2@scan_tree
$LN6@scan_tree:

; 722  :             continue;
; 723  :         } else if (count < min_count) {

  00074	3b c2		 cmp	 eax, edx
  00076	8b 55 08	 mov	 edx, DWORD PTR tv358[ebp]
  00079	7d 0a		 jge	 SHORT $LN8@scan_tree

; 724  :             s->bl_tree[curlen].Freq += count;

  0007b	66 01 84 b1 7c
	0a 00 00	 add	 WORD PTR [ecx+esi*4+2684], ax
  00083	eb 2f		 jmp	 SHORT $LN14@scan_tree
$LN8@scan_tree:

; 725  :         } else if (curlen != 0) {

  00085	85 d2		 test	 edx, edx
  00087	74 16		 je	 SHORT $LN10@scan_tree

; 726  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00089	3b 75 f8	 cmp	 esi, DWORD PTR _prevlen$1$[ebp]
  0008c	74 08		 je	 SHORT $LN25@scan_tree
  0008e	66 ff 84 b1 7c
	0a 00 00	 inc	 WORD PTR [ecx+esi*4+2684]
$LN25@scan_tree:

; 727  :             s->bl_tree[REP_3_6].Freq++;

  00096	66 ff 81 bc 0a
	00 00		 inc	 WORD PTR [ecx+2748]
  0009d	eb 15		 jmp	 SHORT $LN14@scan_tree
$LN10@scan_tree:

; 728  :         } else if (count <= 10) {

  0009f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000a2	7f 09		 jg	 SHORT $LN13@scan_tree

; 729  :             s->bl_tree[REPZ_3_10].Freq++;

  000a4	66 ff 81 c0 0a
	00 00		 inc	 WORD PTR [ecx+2752]

; 730  :         } else {

  000ab	eb 07		 jmp	 SHORT $LN14@scan_tree
$LN13@scan_tree:

; 731  :             s->bl_tree[REPZ_11_138].Freq++;

  000ad	66 ff 81 c4 0a
	00 00		 inc	 WORD PTR [ecx+2756]
$LN14@scan_tree:

; 732  :         }
; 733  :         count = 0; prevlen = curlen;

  000b4	33 c0		 xor	 eax, eax
  000b6	89 75 f8	 mov	 DWORD PTR _prevlen$1$[ebp], esi

; 734  :         if (nextlen == 0) {

  000b9	85 db		 test	 ebx, ebx
  000bb	75 0a		 jne	 SHORT $LN15@scan_tree

; 735  :             max_count = 138, min_count = 3;

  000bd	bf 8a 00 00 00	 mov	 edi, 138		; 0000008aH
  000c2	8d 50 03	 lea	 edx, DWORD PTR [eax+3]
  000c5	eb 16		 jmp	 SHORT $LN2@scan_tree
$LN15@scan_tree:

; 736  :         } else if (curlen == nextlen) {

  000c7	3b d3		 cmp	 edx, ebx
  000c9	75 0a		 jne	 SHORT $LN17@scan_tree

; 737  :             max_count = 6, min_count = 3;

  000cb	bf 06 00 00 00	 mov	 edi, 6
  000d0	8d 57 fd	 lea	 edx, DWORD PTR [edi-3]

; 738  :         } else {

  000d3	eb 08		 jmp	 SHORT $LN2@scan_tree
$LN17@scan_tree:

; 739  :             max_count = 7, min_count = 4;

  000d5	bf 07 00 00 00	 mov	 edi, 7
  000da	8d 57 fd	 lea	 edx, DWORD PTR [edi-3]
$LN2@scan_tree:

; 718  : 
; 719  :     for (n = 0; n <= max_code; n++) {

  000dd	83 45 fc 04	 add	 DWORD PTR tv352[ebp], 4
  000e1	83 6d f4 01	 sub	 DWORD PTR tv360[ebp], 1
  000e5	0f 85 75 ff ff
	ff		 jne	 $LL4@scan_tree
$LN3@scan_tree:
  000eb	5f		 pop	 edi

; 740  :         }
; 741  :     }
; 742  : }

  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_scan_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _send_tree
_TEXT	SEGMENT
tv2260 = -32						; size = 4
tv2215 = -32						; size = 4
tv2207 = -32						; size = 4
tv2203 = -32						; size = 4
tv2064 = -32						; size = 4
tv2271 = -28						; size = 4
tv2169 = -28						; size = 4
tv2127 = -28						; size = 4
tv2084 = -28						; size = 4
tv2044 = -28						; size = 4
tv2264 = -24						; size = 4
tv2267 = -20						; size = 4
_tree$1$ = -20						; size = 4
tv2212 = -16						; size = 4
_nextlen$1$ = -12					; size = 4
tv2269 = -8						; size = 4
_s$1$ = -4						; size = 4
_curlen$1$ = 8						; size = 4
_max_code$ = 8						; size = 4
_send_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 752  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx

; 753  :     int n;                     /* iterates over all tree elements */
; 754  :     int prevlen = -1;          /* last emitted length */
; 755  :     int curlen;                /* length of current code */
; 756  :     int nextlen = tree[0].Len; /* length of next code */

  00007	0f b7 5a 02	 movzx	 ebx, WORD PTR [edx+2]
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 757  :     int count = 0;             /* repeat count of the current code */

  0000d	33 ff		 xor	 edi, edi
  0000f	89 55 ec	 mov	 DWORD PTR _tree$1$[ebp], edx
  00012	83 ce ff	 or	 esi, -1
  00015	89 4d fc	 mov	 DWORD PTR _s$1$[ebp], ecx

; 758  :     int max_count = 7;         /* max repeat count */
; 759  :     int min_count = 4;         /* min repeat count */
; 760  : 
; 761  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 762  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 763  : 
; 764  :     for (n = 0; n <= max_code; n++) {

  00018	39 7d 08	 cmp	 DWORD PTR _max_code$[ebp], edi
  0001b	0f 8c f4 04 00
	00		 jl	 $LN3@send_tree
  00021	85 db		 test	 ebx, ebx
  00023	b8 07 00 00 00	 mov	 eax, 7
  00028	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  0002d	0f 45 d0	 cmovne	 edx, eax
  00030	8b 45 ec	 mov	 eax, DWORD PTR _tree$1$[ebp]
  00033	33 c9		 xor	 ecx, ecx
  00035	85 db		 test	 ebx, ebx
  00037	0f 95 c1	 setne	 cl
  0003a	83 c0 06	 add	 eax, 6
  0003d	89 45 f0	 mov	 DWORD PTR tv2212[ebp], eax
  00040	83 c1 03	 add	 ecx, 3
  00043	8b 45 08	 mov	 eax, DWORD PTR _max_code$[ebp]
  00046	40		 inc	 eax
  00047	89 45 ec	 mov	 DWORD PTR tv2267[ebp], eax
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL4@send_tree:

; 765  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00050	8b 45 f0	 mov	 eax, DWORD PTR tv2212[ebp]

; 766  :         if (++count < max_count && curlen == nextlen) {

  00053	89 7d e4	 mov	 DWORD PTR tv2271[ebp], edi
  00056	47		 inc	 edi
  00057	89 5d f8	 mov	 DWORD PTR tv2269[ebp], ebx
  0005a	89 5d 08	 mov	 DWORD PTR _curlen$1$[ebp], ebx
  0005d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00060	89 45 f4	 mov	 DWORD PTR _nextlen$1$[ebp], eax
  00063	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  00066	3b fa		 cmp	 edi, edx
  00068	7d 0e		 jge	 SHORT $LN9@send_tree
  0006a	8b c3		 mov	 eax, ebx
  0006c	3b 45 f4	 cmp	 eax, DWORD PTR _nextlen$1$[ebp]
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  00072	0f 84 8c 04 00
	00		 je	 $LN47@send_tree
$LN9@send_tree:

; 767  :             continue;
; 768  :         } else if (count < min_count) {

  00078	3b f9		 cmp	 edi, ecx
  0007a	0f 8d b0 00 00
	00		 jge	 $LN11@send_tree
  00080	8d 8b 9f 02 00
	00		 lea	 ecx, DWORD PTR [ebx+671]
  00086	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00089	89 4d e0	 mov	 DWORD PTR tv2215[ebp], ecx
  0008c	0f 1f 40 00	 npad	 4
$LL7@send_tree:

; 769  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  00090	8b 55 08	 mov	 edx, DWORD PTR _curlen$1$[ebp]
  00093	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  00099	0f b7 9c 90 7e
	0a 00 00	 movzx	 ebx, WORD PTR [eax+edx*4+2686]
  000a1	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000a4	8b ca		 mov	 ecx, edx
  000a6	89 4d e4	 mov	 DWORD PTR tv2044[ebp], ecx
  000a9	8b ce		 mov	 ecx, esi
  000ab	66 d3 e2	 shl	 dx, cl
  000ae	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000b3	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  000ba	2b cb		 sub	 ecx, ebx
  000bc	0f b7 d2	 movzx	 edx, dx
  000bf	89 55 e8	 mov	 DWORD PTR tv2264[ebp], edx
  000c2	3b f1		 cmp	 esi, ecx
  000c4	7e 46		 jle	 SHORT $LN13@send_tree
  000c6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c9	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  000d0	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000d3	8b 45 e8	 mov	 eax, DWORD PTR tv2264[ebp]
  000d6	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  000dc	ff 40 14	 inc	 DWORD PTR [eax+20]
  000df	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  000e2	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000e5	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  000eb	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000ee	b1 10		 mov	 cl, 16			; 00000010H
  000f0	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  000f6	8b 55 e4	 mov	 edx, DWORD PTR tv2044[ebp]
  000f9	ff 40 14	 inc	 DWORD PTR [eax+20]
  000fc	66 d3 ea	 shr	 dx, cl
  000ff	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00105	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00108	03 cb		 add	 ecx, ebx
  0010a	eb 03		 jmp	 SHORT $LN48@send_tree
$LN13@send_tree:
  0010c	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
$LN48@send_tree:
  0010f	0f b7 d2	 movzx	 edx, dx
  00112	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00118	8b 4d e0	 mov	 ecx, DWORD PTR tv2215[ebp]
  0011b	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00122	83 ef 01	 sub	 edi, 1
  00125	0f 85 65 ff ff
	ff		 jne	 $LL7@send_tree

; 770  : 
; 771  :         } else if (curlen != 0) {

  0012b	e9 a5 03 00 00	 jmp	 $LN33@send_tree
$LN11@send_tree:
  00130	83 7d f8 00	 cmp	 DWORD PTR tv2269[ebp], 0
  00134	0f 84 89 01 00
	00		 je	 $LN15@send_tree

; 772  :             if (curlen != prevlen) {

  0013a	8b 4d 08	 mov	 ecx, DWORD PTR _curlen$1$[ebp]
  0013d	3b ce		 cmp	 ecx, esi
  0013f	0f 84 8d 00 00
	00		 je	 $LN46@send_tree

; 773  :                 send_code(s, curlen, s->bl_tree); count--;

  00145	0f b7 bc 88 7e
	0a 00 00	 movzx	 edi, WORD PTR [eax+ecx*4+2686]
  0014d	0f b7 94 98 7c
	0a 00 00	 movzx	 edx, WORD PTR [eax+ebx*4+2684]
  00155	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  0015b	8b ca		 mov	 ecx, edx
  0015d	89 4d e0	 mov	 DWORD PTR tv2064[ebp], ecx
  00160	8b ce		 mov	 ecx, esi
  00162	66 d3 e2	 shl	 dx, cl
  00165	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0016a	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00171	2b cf		 sub	 ecx, edi
  00173	0f b7 da	 movzx	 ebx, dx
  00176	3b f1		 cmp	 esi, ecx
  00178	7e 43		 jle	 SHORT $LN18@send_tree
  0017a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0017d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00180	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  00187	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  0018a	ff 40 14	 inc	 DWORD PTR [eax+20]
  0018d	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00190	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00193	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00199	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0019c	b1 10		 mov	 cl, 16			; 00000010H
  0019e	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  001a4	8b 55 e0	 mov	 edx, DWORD PTR tv2064[ebp]
  001a7	ff 40 14	 inc	 DWORD PTR [eax+20]
  001aa	66 d3 ea	 shr	 dx, cl
  001ad	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001b3	83 c1 f0	 add	 ecx, -16		; fffffff0H
  001b6	0f b7 d2	 movzx	 edx, dx
  001b9	03 cf		 add	 ecx, edi
  001bb	eb 05		 jmp	 SHORT $LN19@send_tree
$LN18@send_tree:
  001bd	8b d3		 mov	 edx, ebx
  001bf	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
$LN19@send_tree:
  001c2	8b 7d e4	 mov	 edi, DWORD PTR tv2271[ebp]
  001c5	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  001cb	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
$LN46@send_tree:

; 774  :             }
; 775  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 776  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  001d2	0f b7 90 bc 0a
	00 00		 movzx	 edx, WORD PTR [eax+2748]
  001d9	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  001df	8b ca		 mov	 ecx, edx
  001e1	0f b7 98 be 0a
	00 00		 movzx	 ebx, WORD PTR [eax+2750]
  001e8	89 4d e4	 mov	 DWORD PTR tv2084[ebp], ecx
  001eb	8b ce		 mov	 ecx, esi
  001ed	66 d3 e2	 shl	 dx, cl
  001f0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001f5	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  001fc	2b cb		 sub	 ecx, ebx
  001fe	0f b7 d2	 movzx	 edx, dx
  00201	89 55 e0	 mov	 DWORD PTR tv2260[ebp], edx
  00204	3b f1		 cmp	 esi, ecx
  00206	7e 42		 jle	 SHORT $LN20@send_tree
  00208	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0020b	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00212	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00215	8b 45 e0	 mov	 eax, DWORD PTR tv2260[ebp]
  00218	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0021b	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  0021e	ff 40 14	 inc	 DWORD PTR [eax+20]
  00221	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00224	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00227	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0022d	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00230	b1 10		 mov	 cl, 16			; 00000010H
  00232	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00238	8b 55 e4	 mov	 edx, DWORD PTR tv2084[ebp]
  0023b	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  00241	ff 40 14	 inc	 DWORD PTR [eax+20]
  00244	66 d3 ea	 shr	 dx, cl
  00247	83 c6 f0	 add	 esi, -16		; fffffff0H
$LN20@send_tree:
  0024a	03 f3		 add	 esi, ebx
  0024c	0f b7 d2	 movzx	 edx, dx
  0024f	89 b0 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], esi
  00255	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0025c	0f b7 d2	 movzx	 edx, dx
  0025f	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  00262	7e 57		 jle	 SHORT $LN22@send_tree
  00264	83 c7 fd	 add	 edi, -3			; fffffffdH
  00267	8b ce		 mov	 ecx, esi
  00269	66 8b df	 mov	 bx, di
  0026c	66 d3 e3	 shl	 bx, cl
  0026f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00272	66 0b da	 or	 bx, dx
  00275	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00278	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  0027f	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  00282	ff 40 14	 inc	 DWORD PTR [eax+20]
  00285	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00288	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0028b	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00291	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00294	b1 10		 mov	 cl, 16			; 00000010H
  00296	0f b7 90 bc 16
	00 00		 movzx	 edx, WORD PTR [eax+5820]
  0029d	ff 40 14	 inc	 DWORD PTR [eax+20]
  002a0	2a ca		 sub	 cl, dl
  002a2	83 80 bc 16 00
	00 f2		 add	 DWORD PTR [eax+5820], -14 ; fffffff2H
  002a9	66 d3 ef	 shr	 di, cl
  002ac	0f b7 cf	 movzx	 ecx, di

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  002af	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  002b6	e9 1a 02 00 00	 jmp	 $LN33@send_tree
$LN22@send_tree:

; 774  :             }
; 775  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 776  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  002bb	8d 4e 02	 lea	 ecx, DWORD PTR [esi+2]
  002be	e9 f5 00 00 00	 jmp	 $LN50@send_tree
$LN15@send_tree:

; 777  : 
; 778  :         } else if (count <= 10) {

  002c3	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  002c9	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  002cc	0f 8f 0d 01 00
	00		 jg	 $LN24@send_tree

; 779  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  002d2	0f b7 90 c0 0a
	00 00		 movzx	 edx, WORD PTR [eax+2752]
  002d9	0f b7 98 c2 0a
	00 00		 movzx	 ebx, WORD PTR [eax+2754]
  002e0	8b ca		 mov	 ecx, edx
  002e2	89 4d e4	 mov	 DWORD PTR tv2127[ebp], ecx
  002e5	8b ce		 mov	 ecx, esi
  002e7	66 d3 e2	 shl	 dx, cl
  002ea	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002ef	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  002f6	2b cb		 sub	 ecx, ebx
  002f8	0f b7 d2	 movzx	 edx, dx
  002fb	89 55 e0	 mov	 DWORD PTR tv2203[ebp], edx
  002fe	3b f1		 cmp	 esi, ecx
  00300	7e 42		 jle	 SHORT $LN26@send_tree
  00302	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00305	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0030c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0030f	8b 45 e0	 mov	 eax, DWORD PTR tv2203[ebp]
  00312	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00315	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  00318	ff 40 14	 inc	 DWORD PTR [eax+20]
  0031b	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0031e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00321	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00327	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0032a	b1 10		 mov	 cl, 16			; 00000010H
  0032c	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00332	8b 55 e4	 mov	 edx, DWORD PTR tv2127[ebp]
  00335	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  0033b	ff 40 14	 inc	 DWORD PTR [eax+20]
  0033e	66 d3 ea	 shr	 dx, cl
  00341	83 c6 f0	 add	 esi, -16		; fffffff0H
$LN26@send_tree:
  00344	03 f3		 add	 esi, ebx
  00346	0f b7 d2	 movzx	 edx, dx
  00349	89 b0 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], esi
  0034f	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00356	0f b7 d2	 movzx	 edx, dx
  00359	83 fe 0d	 cmp	 esi, 13			; 0000000dH
  0035c	7e 57		 jle	 SHORT $LN28@send_tree
  0035e	83 c7 fd	 add	 edi, -3			; fffffffdH
  00361	8b ce		 mov	 ecx, esi
  00363	66 8b df	 mov	 bx, di
  00366	66 d3 e3	 shl	 bx, cl
  00369	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0036c	66 0b da	 or	 bx, dx
  0036f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00372	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  00379	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  0037c	ff 40 14	 inc	 DWORD PTR [eax+20]
  0037f	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00382	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00385	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0038b	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0038e	b1 10		 mov	 cl, 16			; 00000010H
  00390	0f b7 90 bc 16
	00 00		 movzx	 edx, WORD PTR [eax+5820]
  00397	ff 40 14	 inc	 DWORD PTR [eax+20]
  0039a	2a ca		 sub	 cl, dl
  0039c	83 80 bc 16 00
	00 f3		 add	 DWORD PTR [eax+5820], -13 ; fffffff3H
  003a3	66 d3 ef	 shr	 di, cl
  003a6	0f b7 cf	 movzx	 ecx, di

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  003a9	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  003b0	e9 20 01 00 00	 jmp	 $LN33@send_tree
$LN28@send_tree:

; 779  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  003b5	8d 4e 03	 lea	 ecx, DWORD PTR [esi+3]
$LN50@send_tree:

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  003b8	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  003be	8d 57 fd	 lea	 edx, DWORD PTR [edi-3]
  003c1	8b ce		 mov	 ecx, esi
  003c3	66 d3 e2	 shl	 dx, cl
  003c6	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003cd	66 0b d1	 or	 dx, cx
  003d0	0f b7 ca	 movzx	 ecx, dx
  003d3	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  003da	e9 f6 00 00 00	 jmp	 $LN33@send_tree
$LN24@send_tree:

; 780  : 
; 781  :         } else {
; 782  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  003df	0f b7 90 c4 0a
	00 00		 movzx	 edx, WORD PTR [eax+2756]
  003e6	0f b7 98 c6 0a
	00 00		 movzx	 ebx, WORD PTR [eax+2758]
  003ed	8b ca		 mov	 ecx, edx
  003ef	89 4d e4	 mov	 DWORD PTR tv2169[ebp], ecx
  003f2	8b ce		 mov	 ecx, esi
  003f4	66 d3 e2	 shl	 dx, cl
  003f7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003fc	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00403	2b cb		 sub	 ecx, ebx
  00405	0f b7 d2	 movzx	 edx, dx
  00408	89 55 e0	 mov	 DWORD PTR tv2207[ebp], edx
  0040b	3b f1		 cmp	 esi, ecx
  0040d	7e 46		 jle	 SHORT $LN30@send_tree
  0040f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00412	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00419	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0041c	8b 45 e0	 mov	 eax, DWORD PTR tv2207[ebp]
  0041f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00422	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  00425	ff 40 14	 inc	 DWORD PTR [eax+20]
  00428	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0042b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0042e	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00434	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00437	b1 10		 mov	 cl, 16			; 00000010H
  00439	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  0043f	8b 55 e4	 mov	 edx, DWORD PTR tv2169[ebp]
  00442	ff 40 14	 inc	 DWORD PTR [eax+20]
  00445	66 d3 ea	 shr	 dx, cl
  00448	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0044e	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00451	03 cb		 add	 ecx, ebx
  00453	eb 03		 jmp	 SHORT $LN49@send_tree
$LN30@send_tree:
  00455	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
$LN49@send_tree:
  00458	0f b7 d2	 movzx	 edx, dx
  0045b	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00461	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00468	0f b7 f2	 movzx	 esi, dx
  0046b	83 f9 09	 cmp	 ecx, 9
  0046e	7e 4c		 jle	 SHORT $LN32@send_tree
  00470	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00473	83 c7 f5	 add	 edi, -11		; fffffff5H
  00476	66 8b df	 mov	 bx, di
  00479	66 d3 e3	 shl	 bx, cl
  0047c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0047f	66 0b de	 or	 bx, si
  00482	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  00489	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  0048c	ff 40 14	 inc	 DWORD PTR [eax+20]
  0048f	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00492	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00495	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0049b	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0049e	b1 10		 mov	 cl, 16			; 00000010H
  004a0	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  004a6	ff 40 14	 inc	 DWORD PTR [eax+20]
  004a9	66 d3 ef	 shr	 di, cl
  004ac	83 80 bc 16 00
	00 f7		 add	 DWORD PTR [eax+5820], -9 ; fffffff7H
  004b3	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  004ba	eb 19		 jmp	 SHORT $LN33@send_tree
$LN32@send_tree:
  004bc	8d 57 f5	 lea	 edx, DWORD PTR [edi-11]
  004bf	66 d3 e2	 shl	 dx, cl
  004c2	66 0b d6	 or	 dx, si
  004c5	83 c1 07	 add	 ecx, 7
  004c8	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  004cf	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN33@send_tree:

; 785  :         if (nextlen == 0) {

  004d5	8b 5d f4	 mov	 ebx, DWORD PTR _nextlen$1$[ebp]
  004d8	33 ff		 xor	 edi, edi
  004da	8b 75 08	 mov	 esi, DWORD PTR _curlen$1$[ebp]
  004dd	85 db		 test	 ebx, ebx
  004df	75 0a		 jne	 SHORT $LN34@send_tree

; 786  :             max_count = 138, min_count = 3;

  004e1	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  004e6	8d 4f 03	 lea	 ecx, DWORD PTR [edi+3]
  004e9	eb 1c		 jmp	 SHORT $LN2@send_tree
$LN34@send_tree:

; 787  :         } else if (curlen == nextlen) {

  004eb	39 5d f8	 cmp	 DWORD PTR tv2269[ebp], ebx
  004ee	75 0a		 jne	 SHORT $LN36@send_tree

; 788  :             max_count = 6, min_count = 3;

  004f0	ba 06 00 00 00	 mov	 edx, 6
  004f5	8d 4a fd	 lea	 ecx, DWORD PTR [edx-3]

; 789  :         } else {

  004f8	eb 0d		 jmp	 SHORT $LN2@send_tree
$LN36@send_tree:

; 790  :             max_count = 7, min_count = 4;

  004fa	ba 07 00 00 00	 mov	 edx, 7
  004ff	8d 4a fd	 lea	 ecx, DWORD PTR [edx-3]
  00502	eb 03		 jmp	 SHORT $LN2@send_tree
$LN47@send_tree:

; 766  :         if (++count < max_count && curlen == nextlen) {

  00504	8b 5d f4	 mov	 ebx, DWORD PTR _nextlen$1$[ebp]
$LN2@send_tree:

; 758  :     int max_count = 7;         /* max repeat count */
; 759  :     int min_count = 4;         /* min repeat count */
; 760  : 
; 761  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 762  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 763  : 
; 764  :     for (n = 0; n <= max_code; n++) {

  00507	83 45 f0 04	 add	 DWORD PTR tv2212[ebp], 4
  0050b	83 6d ec 01	 sub	 DWORD PTR tv2267[ebp], 1
  0050f	0f 85 3b fb ff
	ff		 jne	 $LL4@send_tree
$LN3@send_tree:
  00515	5f		 pop	 edi

; 791  :         }
; 792  :     }
; 793  : }

  00516	5e		 pop	 esi
  00517	5b		 pop	 ebx
  00518	8b e5		 mov	 esp, ebp
  0051a	5d		 pop	 ebp
  0051b	c3		 ret	 0
_send_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _build_bl_tree
_TEXT	SEGMENT
_build_bl_tree PROC					; COMDAT
; _s$ = ecx

; 801  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 802  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 803  : 
; 804  :     /* Determine the bit length frequencies for literal and distance trees */
; 805  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00003	ff b6 1c 0b 00
	00		 push	 DWORD PTR [esi+2844]
  00009	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  0000f	e8 00 00 00 00	 call	 _scan_tree

; 806  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  00014	ff b6 28 0b 00
	00		 push	 DWORD PTR [esi+2856]
  0001a	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  00020	e8 00 00 00 00	 call	 _scan_tree
  00025	83 c4 08	 add	 esp, 8

; 807  : 
; 808  :     /* Build the bit length tree: */
; 809  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00028	8d 96 30 0b 00
	00		 lea	 edx, DWORD PTR [esi+2864]
  0002e	e8 00 00 00 00	 call	 _build_tree

; 810  :     /* opt_len now includes the length of the tree representations, except
; 811  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 812  :      */
; 813  : 
; 814  :     /* Determine the number of bit length codes to send. The pkzip format
; 815  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 816  :      * 3 but the actual value used is 4.)
; 817  :      */
; 818  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00033	ba 12 00 00 00	 mov	 edx, 18			; 00000012H
  00038	b8 10 00 00 00	 mov	 eax, OFFSET _bl_order+16
  0003d	0f 1f 00	 npad	 3
$LL4@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00040	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00044	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  0004d	75 79		 jne	 SHORT $LN8@build_bl_t
  0004f	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00053	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  0005c	75 69		 jne	 SHORT $LN11@build_bl_t
  0005e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00061	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  0006a	75 45		 jne	 SHORT $LN12@build_bl_t
  0006c	0f b6 48 ff	 movzx	 ecx, BYTE PTR [eax-1]
  00070	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00079	75 20		 jne	 SHORT $LN13@build_bl_t

; 810  :     /* opt_len now includes the length of the tree representations, except
; 811  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 812  :      */
; 813  : 
; 814  :     /* Determine the number of bit length codes to send. The pkzip format
; 815  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 816  :      * 3 but the actual value used is 4.)
; 817  :      */
; 818  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  0007b	83 e8 04	 sub	 eax, 4
  0007e	83 ea 04	 sub	 edx, 4
  00081	3d 01 00 00 00	 cmp	 eax, OFFSET _bl_order+1
  00086	7d b8		 jge	 SHORT $LL4@build_bl_t

; 820  :     }
; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex+1) + 5+5+4;

  00088	8d 0c 55 11 00
	00 00		 lea	 ecx, DWORD PTR [edx*2+17]

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;

  0008f	8b c2		 mov	 eax, edx
  00091	03 ca		 add	 ecx, edx
  00093	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  00099	5e		 pop	 esi

; 827  : }

  0009a	c3		 ret	 0
$LN13@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  0009b	83 ea 03	 sub	 edx, 3

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;

  0009e	8b c2		 mov	 eax, edx
  000a0	8d 0c 55 11 00
	00 00		 lea	 ecx, DWORD PTR [edx*2+17]
  000a7	03 ca		 add	 ecx, edx
  000a9	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000af	5e		 pop	 esi

; 827  : }

  000b0	c3		 ret	 0
$LN12@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000b1	83 ea 02	 sub	 edx, 2

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;

  000b4	8b c2		 mov	 eax, edx
  000b6	8d 0c 55 11 00
	00 00		 lea	 ecx, DWORD PTR [edx*2+17]
  000bd	03 ca		 add	 ecx, edx
  000bf	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000c5	5e		 pop	 esi

; 827  : }

  000c6	c3		 ret	 0
$LN11@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000c7	4a		 dec	 edx
$LN8@build_bl_t:

; 820  :     }
; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex+1) + 5+5+4;

  000c8	8d 0c 55 11 00
	00 00		 lea	 ecx, DWORD PTR [edx*2+17]

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;

  000cf	8b c2		 mov	 eax, edx
  000d1	03 ca		 add	 ecx, edx
  000d3	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000d9	5e		 pop	 esi

; 827  : }

  000da	c3		 ret	 0
_build_bl_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _send_all_trees
_TEXT	SEGMENT
_lcodes$1$ = -8						; size = 4
$T1 = -4						; size = 4
_dcodes$ = 8						; size = 4
_blcodes$ = 12						; size = 4
_send_all_trees PROC					; COMDAT
; _s$ = ecx
; _lcodes$ = edx

; 837  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 55 f8	 mov	 DWORD PTR _lcodes$1$[ebp], edx
  0000d	57		 push	 edi

; 838  :     int rank;                    /* index in bl_order */
; 839  : 
; 840  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 841  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 842  :             "too many codes");
; 843  :     Tracev((stderr, "\nbl counts: "));
; 844  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  0000e	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00014	0f b7 86 b8 16
	00 00		 movzx	 eax, WORD PTR [esi+5816]
  0001b	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  0001e	7e 54		 jle	 SHORT $LN5@send_all_t
  00020	8d ba ff fe ff
	ff		 lea	 edi, DWORD PTR [edx-257]
  00026	66 8b d7	 mov	 dx, di
  00029	66 d3 e2	 shl	 dx, cl
  0002c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002f	66 0b d0	 or	 dx, ax
  00032	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00035	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  0003c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0003f	ff 46 14	 inc	 DWORD PTR [esi+20]
  00042	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00045	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00048	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  0004e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00051	b1 10		 mov	 cl, 16			; 00000010H
  00053	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  0005a	83 86 bc 16 00
	00 f5		 add	 DWORD PTR [esi+5820], -11 ; fffffff5H
  00061	2a c8		 sub	 cl, al
  00063	ff 46 14	 inc	 DWORD PTR [esi+20]
  00066	8b 9e bc 16 00
	00		 mov	 ebx, DWORD PTR [esi+5820]
  0006c	66 d3 ef	 shr	 di, cl
  0006f	0f b7 c7	 movzx	 eax, di
  00072	eb 1f		 jmp	 SHORT $LN6@send_all_t
$LN5@send_all_t:
  00074	8d 82 ff fe ff
	ff		 lea	 eax, DWORD PTR [edx-257]
  0007a	66 d3 e0	 shl	 ax, cl
  0007d	8d 59 05	 lea	 ebx, DWORD PTR [ecx+5]
  00080	0f b7 8e b8 16
	00 00		 movzx	 ecx, WORD PTR [esi+5816]
  00087	66 0b c1	 or	 ax, cx
  0008a	89 9e bc 16 00
	00		 mov	 DWORD PTR [esi+5820], ebx
  00090	0f b7 c0	 movzx	 eax, ax
$LN6@send_all_t:

; 845  :     send_bits(s, dcodes-1,   5);

  00093	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	0f b7 c0	 movzx	 eax, ax
  0009f	83 fb 0b	 cmp	 ebx, 11			; 0000000bH
  000a2	7e 52		 jle	 SHORT $LN7@send_all_t
  000a4	8b 7d 08	 mov	 edi, DWORD PTR _dcodes$[ebp]
  000a7	4f		 dec	 edi
  000a8	66 8b d7	 mov	 dx, di
  000ab	66 d3 e2	 shl	 dx, cl
  000ae	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000b1	66 0b d0	 or	 dx, ax
  000b4	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000b7	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  000be	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000c1	ff 46 14	 inc	 DWORD PTR [esi+20]
  000c4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000c7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ca	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  000d0	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000d3	b1 10		 mov	 cl, 16			; 00000010H
  000d5	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  000dc	83 86 bc 16 00
	00 f5		 add	 DWORD PTR [esi+5820], -11 ; fffffff5H
  000e3	2a c8		 sub	 cl, al
  000e5	ff 46 14	 inc	 DWORD PTR [esi+20]
  000e8	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  000ee	66 d3 ef	 shr	 di, cl
  000f1	0f b7 c7	 movzx	 eax, di
  000f4	eb 1d		 jmp	 SHORT $LN18@send_all_t
$LN7@send_all_t:
  000f6	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  000f9	8d 53 05	 lea	 edx, DWORD PTR [ebx+5]
  000fc	48		 dec	 eax
  000fd	89 96 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], edx
  00103	66 d3 e0	 shl	 ax, cl
  00106	0f b7 8e b8 16
	00 00		 movzx	 ecx, WORD PTR [esi+5816]
  0010d	66 0b c1	 or	 ax, cx
  00110	0f b7 c0	 movzx	 eax, ax
$LN18@send_all_t:

; 846  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  00113	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00116	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00119	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  00120	0f b7 d8	 movzx	 ebx, ax
  00123	83 fa 0c	 cmp	 edx, 12			; 0000000cH
  00126	7e 54		 jle	 SHORT $LN9@send_all_t
  00128	8b 7d 0c	 mov	 edi, DWORD PTR _blcodes$[ebp]
  0012b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0012e	83 c7 fc	 add	 edi, -4			; fffffffcH
  00131	66 8b d7	 mov	 dx, di
  00134	66 d3 e2	 shl	 dx, cl
  00137	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0013a	66 0b d3	 or	 dx, bx
  0013d	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  00144	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00147	ff 46 14	 inc	 DWORD PTR [esi+20]
  0014a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0014d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00150	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  00156	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00159	b1 10		 mov	 cl, 16			; 00000010H
  0015b	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  00162	83 86 bc 16 00
	00 f4		 add	 DWORD PTR [esi+5820], -12 ; fffffff4H
  00169	2a c8		 sub	 cl, al
  0016b	ff 46 14	 inc	 DWORD PTR [esi+20]
  0016e	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  00174	66 d3 ef	 shr	 di, cl
  00177	0f b7 c7	 movzx	 eax, di
  0017a	eb 18		 jmp	 SHORT $LN10@send_all_t
$LN9@send_all_t:
  0017c	8b 45 0c	 mov	 eax, DWORD PTR _blcodes$[ebp]
  0017f	83 c2 04	 add	 edx, 4
  00182	83 c0 fc	 add	 eax, -4			; fffffffcH
  00185	89 96 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], edx
  0018b	66 d3 e0	 shl	 ax, cl
  0018e	66 0b c3	 or	 ax, bx
  00191	0f b7 c0	 movzx	 eax, ax
$LN10@send_all_t:

; 847  :     for (rank = 0; rank < blcodes; rank++) {

  00194	33 db		 xor	 ebx, ebx
  00196	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  0019d	39 5d 0c	 cmp	 DWORD PTR _blcodes$[ebp], ebx
  001a0	0f 8e 99 00 00
	00		 jle	 $LN3@send_all_t
  001a6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@send_all_t:

; 848  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 849  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  001b0	0f b6 83 00 00
	00 00		 movzx	 eax, BYTE PTR _bl_order[ebx]
  001b7	8b ca		 mov	 ecx, edx
  001b9	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  001bc	83 fa 0d	 cmp	 edx, 13			; 0000000dH
  001bf	7e 5a		 jle	 SHORT $LN11@send_all_t
  001c1	0f b7 b8 7e 0a
	00 00		 movzx	 edi, WORD PTR [eax+2686]
  001c8	66 8b c7	 mov	 ax, di
  001cb	66 d3 e0	 shl	 ax, cl
  001ce	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  001d5	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001d8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001db	66 8b 96 b8 16
	00 00		 mov	 dx, WORD PTR [esi+5816]
  001e2	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001e5	ff 46 14	 inc	 DWORD PTR [esi+20]
  001e8	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001eb	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ee	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  001f4	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001f7	b1 10		 mov	 cl, 16			; 00000010H
  001f9	2a 8e bc 16 00
	00		 sub	 cl, BYTE PTR [esi+5820]
  001ff	ff 46 14	 inc	 DWORD PTR [esi+20]
  00202	66 d3 ef	 shr	 di, cl
  00205	83 86 bc 16 00
	00 f3		 add	 DWORD PTR [esi+5820], -13 ; fffffff3H
  0020c	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  00212	66 89 be b8 16
	00 00		 mov	 WORD PTR [esi+5816], di
  00219	eb 1a		 jmp	 SHORT $LN2@send_all_t
$LN11@send_all_t:
  0021b	66 8b 80 7e 0a
	00 00		 mov	 ax, WORD PTR [eax+2686]
  00222	66 d3 e0	 shl	 ax, cl
  00225	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  0022c	83 c2 03	 add	 edx, 3
  0022f	89 96 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], edx
$LN2@send_all_t:

; 847  :     for (rank = 0; rank < blcodes; rank++) {

  00235	43		 inc	 ebx
  00236	3b 5d 0c	 cmp	 ebx, DWORD PTR _blcodes$[ebp]
  00239	0f 8c 71 ff ff
	ff		 jl	 $LL4@send_all_t
$LN3@send_all_t:

; 850  :     }
; 851  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 852  : 
; 853  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  0023f	8b 45 f8	 mov	 eax, DWORD PTR _lcodes$1$[ebp]
  00242	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  00248	48		 dec	 eax
  00249	8b ce		 mov	 ecx, esi
  0024b	50		 push	 eax
  0024c	e8 00 00 00 00	 call	 _send_tree

; 854  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 855  : 
; 856  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  00251	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  00254	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  0025a	48		 dec	 eax
  0025b	8b ce		 mov	 ecx, esi
  0025d	50		 push	 eax
  0025e	e8 00 00 00 00	 call	 _send_tree
  00263	83 c4 08	 add	 esp, 8
  00266	5f		 pop	 edi
  00267	5e		 pop	 esi
  00268	5b		 pop	 ebx

; 857  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 858  : }

  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c3		 ret	 0
_send_all_trees ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _compress_block
_TEXT	SEGMENT
_lx$1$ = -32						; size = 4
tv1741 = -32						; size = 4
$T1 = -28						; size = 4
_extra$2$ = -28						; size = 4
_dist$1$ = -28						; size = 4
tv1697 = -28						; size = 4
_extra$1$ = -24						; size = 4
tv1769 = -24						; size = 4
$T2 = -20						; size = 4
tv1652 = -20						; size = 4
_len$1$ = -16						; size = 4
_len$1$ = -16						; size = 4
_len$1$ = -16						; size = 4
_s$1$ = -12						; size = 4
tv1807 = -8						; size = 4
tv1751 = -8						; size = 4
_ltree$1$ = -4						; size = 4
_dtree$ = 8						; size = 4
_compress_block PROC					; COMDAT
; _s$ = ecx
; _ltree$ = edx

; 1068 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
  00007	8b da		 mov	 ebx, edx
  00009	8b c1		 mov	 eax, ecx

; 1069 :     unsigned dist;      /* distance of matched string */
; 1070 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1071 :     unsigned lx = 0;    /* running index in l_buf */

  0000b	33 d2		 xor	 edx, edx
  0000d	89 5d fc	 mov	 DWORD PTR _ltree$1$[ebp], ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 45 f4	 mov	 DWORD PTR _s$1$[ebp], eax

; 1072 :     unsigned code;      /* the code to send */
; 1073 :     int extra;          /* number of extra bits to send */
; 1074 : 
; 1075 :     if (s->last_lit != 0) do {

  00015	8d 72 10	 lea	 esi, DWORD PTR [edx+16]
  00018	39 90 a0 16 00
	00		 cmp	 DWORD PTR [eax+5792], edx
  0001e	0f 84 77 03 00
	00		 je	 $LN3@compress_b
  00024	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@compress_b:

; 1076 :         dist = s->d_buf[lx];

  00030	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  00036	0f b7 1c 51	 movzx	 ebx, WORD PTR [ecx+edx*2]

; 1077 :         lc = s->l_buf[lx++];

  0003a	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  00040	89 5d e4	 mov	 DWORD PTR _dist$1$[ebp], ebx
  00043	0f b6 3c 0a	 movzx	 edi, BYTE PTR [edx+ecx]
  00047	42		 inc	 edx
  00048	89 55 e0	 mov	 DWORD PTR _lx$1$[ebp], edx

; 1078 :         if (dist == 0) {

  0004b	85 db		 test	 ebx, ebx
  0004d	0f 85 90 00 00
	00		 jne	 $LN6@compress_b

; 1079 :             send_code(s, lc, ltree); /* send a literal byte */

  00053	8b 55 fc	 mov	 edx, DWORD PTR _ltree$1$[ebp]
  00056	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0005c	0f b7 5c ba 02	 movzx	 ebx, WORD PTR [edx+edi*4+2]
  00061	0f b7 3c ba	 movzx	 edi, WORD PTR [edx+edi*4]
  00065	8b d6		 mov	 edx, esi
  00067	2b d3		 sub	 edx, ebx
  00069	89 5d f0	 mov	 DWORD PTR _len$1$[ebp], ebx
  0006c	3b ca		 cmp	 ecx, edx
  0006e	7e 4e		 jle	 SHORT $LN8@compress_b
  00070	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00073	66 8b df	 mov	 bx, di
  00076	66 d3 e3	 shl	 bx, cl
  00079	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00080	66 0b d9	 or	 bx, cx
  00083	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00086	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  0008d	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  00090	ff 40 14	 inc	 DWORD PTR [eax+20]
  00093	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00096	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00099	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0009f	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000a2	b1 10		 mov	 cl, 16			; 00000010H
  000a4	8b 55 f0	 mov	 edx, DWORD PTR _len$1$[ebp]
  000a7	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  000ad	83 c2 f0	 add	 edx, -16		; fffffff0H
  000b0	ff 40 14	 inc	 DWORD PTR [eax+20]
  000b3	03 90 bc 16 00
	00		 add	 edx, DWORD PTR [eax+5820]
  000b9	66 d3 ef	 shr	 di, cl
  000bc	eb 10		 jmp	 SHORT $LN28@compress_b
$LN8@compress_b:
  000be	66 d3 e7	 shl	 di, cl
  000c1	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000c4	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000cb	66 0b f9	 or	 di, cx
$LN28@compress_b:

; 1080 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1081 :         } else {

  000ce	0f b7 cf	 movzx	 ecx, di
  000d1	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  000d8	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000de	e9 a1 02 00 00	 jmp	 $LN2@compress_b
$LN6@compress_b:

; 1082 :             /* Here, lc is the match length - MIN_MATCH */
; 1083 :             code = _length_code[lc];

  000e3	0f b6 8f 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[edi]

; 1084 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  000ea	8b 45 fc	 mov	 eax, DWORD PTR _ltree$1$[ebp]
  000ed	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  000f4	89 55 e8	 mov	 DWORD PTR tv1769[ebp], edx
  000f7	0f b7 94 02 06
	04 00 00	 movzx	 edx, WORD PTR [edx+eax+1030]
  000ff	89 55 f0	 mov	 DWORD PTR _len$1$[ebp], edx
  00102	8b d0		 mov	 edx, eax
  00104	8b 45 f4	 mov	 eax, DWORD PTR _s$1$[ebp]
  00107	0f b7 94 8a 04
	04 00 00	 movzx	 edx, WORD PTR [edx+ecx*4+1028]
  0010f	8b ca		 mov	 ecx, edx
  00111	89 4d ec	 mov	 DWORD PTR tv1652[ebp], ecx
  00114	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0011a	66 d3 e2	 shl	 dx, cl
  0011d	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00124	0f b7 ca	 movzx	 ecx, dx
  00127	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  0012d	89 4d f8	 mov	 DWORD PTR tv1807[ebp], ecx
  00130	8b ce		 mov	 ecx, esi
  00132	8b 75 f0	 mov	 esi, DWORD PTR _len$1$[ebp]
  00135	2b ce		 sub	 ecx, esi
  00137	3b d1		 cmp	 edx, ecx
  00139	8b 4d f8	 mov	 ecx, DWORD PTR tv1807[ebp]
  0013c	7e 4d		 jle	 SHORT $LN10@compress_b
  0013e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00141	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  00148	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0014b	8b 45 f8	 mov	 eax, DWORD PTR tv1807[ebp]
  0014e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00151	8b 45 f4	 mov	 eax, DWORD PTR _s$1$[ebp]
  00154	ff 40 14	 inc	 DWORD PTR [eax+20]
  00157	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0015a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0015d	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00163	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00166	b1 10		 mov	 cl, 16			; 00000010H
  00168	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  0016e	8b 55 ec	 mov	 edx, DWORD PTR tv1652[ebp]
  00171	ff 40 14	 inc	 DWORD PTR [eax+20]
  00174	66 d3 ea	 shr	 dx, cl
  00177	0f b7 ca	 movzx	 ecx, dx
  0017a	8b 55 f0	 mov	 edx, DWORD PTR _len$1$[ebp]
  0017d	83 c2 f0	 add	 edx, -16		; fffffff0H
  00180	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
  00183	03 90 bc 16 00
	00		 add	 edx, DWORD PTR [eax+5820]
  00189	eb 05		 jmp	 SHORT $LN11@compress_b
$LN10@compress_b:
  0018b	0f b7 c9	 movzx	 ecx, cx
  0018e	03 d6		 add	 edx, esi
$LN11@compress_b:

; 1085 :             extra = extra_lbits[code];

  00190	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00196	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  0019d	8b 4d e8	 mov	 ecx, DWORD PTR tv1769[ebp]
  001a0	8b b1 00 00 00
	00		 mov	 esi, DWORD PTR _extra_lbits[ecx]
  001a6	89 75 e8	 mov	 DWORD PTR _extra$1$[ebp], esi

; 1086 :             if (extra != 0) {

  001a9	85 f6		 test	 esi, esi
  001ab	0f 84 84 00 00
	00		 je	 $LN14@compress_b

; 1087 :                 lc -= base_length[code];

  001b1	2b b9 00 00 00
	00		 sub	 edi, DWORD PTR _base_length[ecx]

; 1088 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  001b7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001bc	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001c2	2b d6		 sub	 edx, esi
  001c4	3b ca		 cmp	 ecx, edx
  001c6	7e 5b		 jle	 SHORT $LN13@compress_b
  001c8	0f b7 90 b8 16
	00 00		 movzx	 edx, WORD PTR [eax+5816]
  001cf	0f b7 ff	 movzx	 edi, di
  001d2	66 8b df	 mov	 bx, di
  001d5	66 d3 e3	 shl	 bx, cl
  001d8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001db	66 0b da	 or	 bx, dx
  001de	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001e1	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  001e8	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  001eb	ff 40 14	 inc	 DWORD PTR [eax+20]
  001ee	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  001f1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f4	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  001fa	8b 5d e4	 mov	 ebx, DWORD PTR _dist$1$[ebp]
  001fd	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00200	b1 10		 mov	 cl, 16			; 00000010H
  00202	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00208	ff 40 14	 inc	 DWORD PTR [eax+20]
  0020b	66 d3 ef	 shr	 di, cl
  0020e	8b 4d e8	 mov	 ecx, DWORD PTR _extra$1$[ebp]
  00211	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00214	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  0021b	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  00221	eb 12		 jmp	 SHORT $LN14@compress_b
$LN13@compress_b:
  00223	66 d3 e7	 shl	 di, cl
  00226	66 09 b8 b8 16
	00 00		 or	 WORD PTR [eax+5816], di
  0022d	03 ce		 add	 ecx, esi
  0022f	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN14@compress_b:

; 1089 :             }
; 1090 :             dist--; /* dist is now the match distance - 1 */

  00235	4b		 dec	 ebx

; 1091 :             code = d_code(dist);

  00236	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  0023c	73 08		 jae	 SHORT $LN23@compress_b
  0023e	8a 8b 00 00 00
	00		 mov	 cl, BYTE PTR __dist_code[ebx]
  00244	eb 0b		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  00246	8b cb		 mov	 ecx, ebx
  00248	c1 e9 07	 shr	 ecx, 7
  0024b	8a 89 00 01 00
	00		 mov	 cl, BYTE PTR __dist_code[ecx+256]
$LN24@compress_b:

; 1092 :             Assert (code < D_CODES, "bad d_code");
; 1093 : 
; 1094 :             send_code(s, code, dtree);       /* send the distance code */

  00251	8b 55 08	 mov	 edx, DWORD PTR _dtree$[ebp]
  00254	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  0025a	0f b6 f9	 movzx	 edi, cl
  0025d	0f b7 4c ba 02	 movzx	 ecx, WORD PTR [edx+edi*4+2]
  00262	0f b7 14 ba	 movzx	 edx, WORD PTR [edx+edi*4]
  00266	89 4d f0	 mov	 DWORD PTR _len$1$[ebp], ecx
  00269	8b ca		 mov	 ecx, edx
  0026b	89 4d e4	 mov	 DWORD PTR tv1697[ebp], ecx
  0026e	8b ce		 mov	 ecx, esi
  00270	66 d3 e2	 shl	 dx, cl
  00273	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  0027a	0f b7 ca	 movzx	 ecx, dx
  0027d	8b 55 f0	 mov	 edx, DWORD PTR _len$1$[ebp]
  00280	89 4d f8	 mov	 DWORD PTR tv1751[ebp], ecx
  00283	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00288	2b ca		 sub	 ecx, edx
  0028a	3b f1		 cmp	 esi, ecx
  0028c	8b 4d f8	 mov	 ecx, DWORD PTR tv1751[ebp]
  0028f	7e 4d		 jle	 SHORT $LN15@compress_b
  00291	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00294	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  0029b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0029e	8b 45 f8	 mov	 eax, DWORD PTR tv1751[ebp]
  002a1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002a4	8b 45 f4	 mov	 eax, DWORD PTR _s$1$[ebp]
  002a7	ff 40 14	 inc	 DWORD PTR [eax+20]
  002aa	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  002ad	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002b0	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  002b6	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  002b9	b1 10		 mov	 cl, 16			; 00000010H
  002bb	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  002c1	8b 55 e4	 mov	 edx, DWORD PTR tv1697[ebp]
  002c4	ff 40 14	 inc	 DWORD PTR [eax+20]
  002c7	66 d3 ea	 shr	 dx, cl
  002ca	0f b7 ca	 movzx	 ecx, dx
  002cd	8b 55 f0	 mov	 edx, DWORD PTR _len$1$[ebp]
  002d0	83 c2 f0	 add	 edx, -16		; fffffff0H
  002d3	89 4d e4	 mov	 DWORD PTR $T1[ebp], ecx
  002d6	03 90 bc 16 00
	00		 add	 edx, DWORD PTR [eax+5820]
  002dc	eb 05		 jmp	 SHORT $LN16@compress_b
$LN15@compress_b:
  002de	0f b7 c9	 movzx	 ecx, cx
  002e1	03 d6		 add	 edx, esi
$LN16@compress_b:

; 1095 :             extra = extra_dbits[code];

  002e3	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  002e9	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  002f0	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR _extra_dbits[edi*4]
  002f7	89 75 e4	 mov	 DWORD PTR _extra$2$[ebp], esi

; 1096 :             if (extra != 0) {

  002fa	85 f6		 test	 esi, esi
  002fc	0f 84 82 00 00
	00		 je	 $LN2@compress_b

; 1097 :                 dist -= (unsigned)base_dist[code];

  00302	2b 1c bd 00 00
	00 00		 sub	 ebx, DWORD PTR _base_dist[edi*4]

; 1098 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  00309	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0030e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00314	2b d6		 sub	 edx, esi
  00316	3b ca		 cmp	 ecx, edx
  00318	7e 58		 jle	 SHORT $LN18@compress_b
  0031a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0031d	0f b7 fb	 movzx	 edi, bx
  00320	66 8b df	 mov	 bx, di
  00323	66 d3 e3	 shl	 bx, cl
  00326	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0032d	66 0b d9	 or	 bx, cx
  00330	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00333	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  0033a	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  0033d	ff 40 14	 inc	 DWORD PTR [eax+20]
  00340	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00343	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00346	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0034c	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0034f	b1 10		 mov	 cl, 16			; 00000010H
  00351	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00357	ff 40 14	 inc	 DWORD PTR [eax+20]
  0035a	66 d3 ef	 shr	 di, cl
  0035d	8b 4d e4	 mov	 ecx, DWORD PTR _extra$2$[ebp]
  00360	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00363	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  0036a	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  00370	eb 12		 jmp	 SHORT $LN2@compress_b
$LN18@compress_b:
  00372	66 d3 e3	 shl	 bx, cl
  00375	66 09 98 b8 16
	00 00		 or	 WORD PTR [eax+5816], bx
  0037c	03 ce		 add	 ecx, esi
  0037e	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN2@compress_b:

; 1099 :             }
; 1100 :         } /* literal or match pair ? */
; 1101 : 
; 1102 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1103 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1104 :                "pendingBuf overflow");
; 1105 : 
; 1106 :     } while (lx < s->last_lit);

  00384	8b 55 e0	 mov	 edx, DWORD PTR _lx$1$[ebp]
  00387	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0038c	3b 90 a0 16 00
	00		 cmp	 edx, DWORD PTR [eax+5792]
  00392	0f 82 98 fc ff
	ff		 jb	 $LL4@compress_b
  00398	8b 5d fc	 mov	 ebx, DWORD PTR _ltree$1$[ebp]
$LN3@compress_b:

; 1107 : 
; 1108 :     send_code(s, END_BLOCK, ltree);

  0039b	0f b7 93 00 04
	00 00		 movzx	 edx, WORD PTR [ebx+1024]
  003a2	0f b7 bb 02 04
	00 00		 movzx	 edi, WORD PTR [ebx+1026]
  003a9	8b da		 mov	 ebx, edx
  003ab	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  003b1	2b f7		 sub	 esi, edi
  003b3	66 d3 e2	 shl	 dx, cl
  003b6	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  003bd	89 5d e0	 mov	 DWORD PTR tv1741[ebp], ebx
  003c0	0f b7 da	 movzx	 ebx, dx
  003c3	3b ce		 cmp	 ecx, esi
  003c5	7e 41		 jle	 SHORT $LN20@compress_b
  003c7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003ca	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003cd	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  003d4	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  003d7	ff 40 14	 inc	 DWORD PTR [eax+20]
  003da	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  003dd	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003e0	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  003e6	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  003e9	b1 10		 mov	 cl, 16			; 00000010H
  003eb	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  003f1	8b 55 e0	 mov	 edx, DWORD PTR tv1741[ebp]
  003f4	ff 40 14	 inc	 DWORD PTR [eax+20]
  003f7	66 d3 ea	 shr	 dx, cl
  003fa	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00400	0f b7 d2	 movzx	 edx, dx
  00403	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00406	eb 02		 jmp	 SHORT $LN29@compress_b
$LN20@compress_b:
  00408	8b d3		 mov	 edx, ebx
$LN29@compress_b:

; 1109 : }

  0040a	03 cf		 add	 ecx, edi
  0040c	5f		 pop	 edi
  0040d	5e		 pop	 esi
  0040e	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00414	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0041b	5b		 pop	 ebx
  0041c	8b e5		 mov	 esp, ebp
  0041e	5d		 pop	 ebp
  0041f	c3		 ret	 0
_compress_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _detect_data_type
_TEXT	SEGMENT
_detect_data_type PROC					; COMDAT
; _s$ = ecx

; 1126 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1127 :     /* black_mask is the bit mask of black-listed bytes
; 1128 :      * set bits 0..6, 14..25, and 28..31
; 1129 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1130 :      */
; 1131 :     unsigned long black_mask = 0xf3ffc07fUL;

  00004	b8 7f c0 ff f3	 mov	 eax, -201342849		; f3ffc07fH

; 1132 :     int n;
; 1133 : 
; 1134 :     /* Check for non-textual ("black-listed") bytes. */
; 1135 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  00009	33 f6		 xor	 esi, esi
  0000b	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
$LL4@detect_dat:

; 1136 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00011	a8 01		 test	 al, 1
  00013	74 06		 je	 SHORT $LN2@detect_dat
  00015	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  00019	75 47		 jne	 SHORT $LN15@detect_dat
$LN2@detect_dat:

; 1132 :     int n;
; 1133 : 
; 1134 :     /* Check for non-textual ("black-listed") bytes. */
; 1135 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  0001b	46		 inc	 esi
  0001c	d1 e8		 shr	 eax, 1
  0001e	83 c2 04	 add	 edx, 4
  00021	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00024	7e eb		 jle	 SHORT $LL4@detect_dat

; 1137 :             return Z_BINARY;
; 1138 : 
; 1139 :     /* Check for textual ("white-listed") bytes. */
; 1140 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1141 :             || s->dyn_ltree[13].Freq != 0)

  00026	66 83 bf b8 00
	00 00 00	 cmp	 WORD PTR [edi+184], 0
  0002e	75 37		 jne	 SHORT $LN10@detect_dat
  00030	66 83 bf bc 00
	00 00 00	 cmp	 WORD PTR [edi+188], 0
  00038	75 2d		 jne	 SHORT $LN10@detect_dat
  0003a	66 83 bf c8 00
	00 00 00	 cmp	 WORD PTR [edi+200], 0
  00042	75 23		 jne	 SHORT $LN10@detect_dat

; 1143 :     for (n = 32; n < LITERALS; n++)

  00044	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00049	8d 87 14 01 00
	00		 lea	 eax, DWORD PTR [edi+276]
  0004f	90		 npad	 1
$LL7@detect_dat:

; 1144 :         if (s->dyn_ltree[n].Freq != 0)

  00050	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00054	75 11		 jne	 SHORT $LN10@detect_dat

; 1143 :     for (n = 32; n < LITERALS; n++)

  00056	41		 inc	 ecx
  00057	83 c0 04	 add	 eax, 4
  0005a	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00060	7c ee		 jl	 SHORT $LL7@detect_dat
$LN15@detect_dat:
  00062	5f		 pop	 edi

; 1145 :             return Z_TEXT;
; 1146 : 
; 1147 :     /* There are no "black-listed" or "white-listed" bytes:
; 1148 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1149 :      */
; 1150 :     return Z_BINARY;
; 1151 : }

  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi
  00066	c3		 ret	 0
$LN10@detect_dat:
  00067	5f		 pop	 edi

; 1142 :         return Z_TEXT;

  00068	b8 01 00 00 00	 mov	 eax, 1

; 1145 :             return Z_TEXT;
; 1146 : 
; 1147 :     /* There are no "black-listed" or "white-listed" bytes:
; 1148 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1149 :      */
; 1150 :     return Z_BINARY;
; 1151 : }

  0006d	5e		 pop	 esi
  0006e	c3		 ret	 0
_detect_data_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _bi_reverse
_TEXT	SEGMENT
_bi_reverse PROC					; COMDAT
; _code$ = ecx
; _len$ = edx

; 1162 :     register unsigned res = 0;

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
$LL4@bi_reverse:

; 1163 :     do {
; 1164 :         res |= code & 1;

  00003	8b f1		 mov	 esi, ecx

; 1165 :         code >>= 1, res <<= 1;
; 1166 :     } while (--len > 0);

  00005	4a		 dec	 edx
  00006	83 e6 01	 and	 esi, 1
  00009	d1 e9		 shr	 ecx, 1
  0000b	0b c6		 or	 eax, esi
  0000d	03 c0		 add	 eax, eax
  0000f	85 d2		 test	 edx, edx
  00011	7f f0		 jg	 SHORT $LL4@bi_reverse

; 1167 :     return res >> 1;

  00013	d1 e8		 shr	 eax, 1
  00015	5e		 pop	 esi

; 1168 : }

  00016	c3		 ret	 0
_bi_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _bi_flush
_TEXT	SEGMENT
_bi_flush PROC						; COMDAT
; _s$ = ecx

; 1175 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1176 :     if (s->bi_valid == 16) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000c	75 37		 jne	 SHORT $LN2@bi_flush

; 1177 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00014	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0002e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00031	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1178 :         s->bi_buf = 0;

  00034	33 c0		 xor	 eax, eax

; 1179 :         s->bi_valid = 0;

  00036	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax

; 1184 :     }
; 1185 : }

  0003c	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  00043	5e		 pop	 esi
  00044	c3		 ret	 0
$LN2@bi_flush:

; 1180 :     } else if (s->bi_valid >= 8) {

  00045	83 f8 08	 cmp	 eax, 8
  00048	7c 27		 jl	 SHORT $LN4@bi_flush

; 1181 :         put_byte(s, (Byte)s->bi_buf);

  0004a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004d	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00050	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
  00056	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1182 :         s->bi_buf >>= 8;

  00059	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  00060	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1183 :         s->bi_valid -= 8;

  00063	83 86 bc 16 00
	00 f8		 add	 DWORD PTR [esi+5820], -8 ; fffffff8H

; 1184 :     }
; 1185 : }

  0006a	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
$LN4@bi_flush:
  00071	5e		 pop	 esi
  00072	c3		 ret	 0
_bi_flush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\trees.c
;	COMDAT _bi_windup
_TEXT	SEGMENT
_bi_windup PROC						; COMDAT
; _s$ = ecx

; 1192 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1193 :     if (s->bi_valid > 8) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 08	 cmp	 eax, 8
  0000c	7e 22		 jle	 SHORT $LN2@bi_windup

; 1194 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00014	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0002e	eb 10		 jmp	 SHORT $LN6@bi_windup
$LN2@bi_windup:

; 1195 :     } else if (s->bi_valid > 0) {

  00030	85 c0		 test	 eax, eax
  00032	7e 12		 jle	 SHORT $LN4@bi_windup

; 1196 :         put_byte(s, (Byte)s->bi_buf);

  00034	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
$LN6@bi_windup:

; 1197 :     }
; 1198 :     s->bi_buf = 0;

  00040	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00043	ff 46 14	 inc	 DWORD PTR [esi+20]
$LN4@bi_windup:
  00046	33 c0		 xor	 eax, eax
  00048	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax

; 1199 :     s->bi_valid = 0;

  0004f	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00055	5e		 pop	 esi

; 1200 : #ifdef ZLIB_DEBUG
; 1201 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1202 : #endif
; 1203 : }

  00056	c3		 ret	 0
_bi_windup ENDP
_TEXT	ENDS
END
