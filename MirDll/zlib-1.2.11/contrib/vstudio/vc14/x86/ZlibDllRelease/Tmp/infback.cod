; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28315.0 

	TITLE	g:\c_library\zlib-vs\zlib-1.2.11\infback.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type@		; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@	; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ ; `string'
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ DB 'invalid distanc'
	DB	'e too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code@ DB 'invalid distance code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ DB 'invalid literal/le'
	DB	'ngth code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set@ DB 'invalid distances set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ DB 'invalid literal/le'
	DB	'ngths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ DB 'invalid c'
	DB	'ode -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ DB 'invalid bit length r'
	DB	'epeat', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@ DB 'invalid code lengths '
	DB	'set', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ DB 'too many len'
	DB	'gth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ DB 'invalid stored bl'
	DB	'ock lengths', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type@ DB 'invalid block type', 00H ; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 c4 00 00
	00		 je	 $LN3@inflateBac
  00012	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00015	0f 85 bb 00 00
	00		 jne	 $LN3@inflateBac
  0001b	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001f	0f 85 b1 00 00
	00		 jne	 $LN3@inflateBac

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 9b 00 00
	00		 je	 $LN5@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 90 00 00
	00		 je	 $LN5@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	0f 87 81 00 00
	00		 ja	 $LN5@inflateBac

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00049	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0004c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00053	85 c0		 test	 eax, eax
  00055	75 13		 jne	 SHORT $LN10@inflateBac

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;
; 49   :         strm->opaque = (voidpf)0;

  00057	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0005a	33 c9		 xor	 ecx, ecx
  0005c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc
  00063	b8 00 00 00 00	 mov	 eax, OFFSET _zcalloc
  00068	eb 03		 jmp	 SHORT $LN6@inflateBac
$LN10@inflateBac:
  0006a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
$LN6@inflateBac:

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  0006d	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00071	75 07		 jne	 SHORT $LN7@inflateBac

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00073	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN7@inflateBac:

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0007a	68 d0 1b 00 00	 push	 7120			; 00001bd0H
  0007f	6a 01		 push	 1
  00081	51		 push	 ecx
  00082	ff d0		 call	 eax
  00084	8b d0		 mov	 edx, eax
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   :                                                sizeof(struct inflate_state));
; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00089	85 d2		 test	 edx, edx
  0008b	75 0a		 jne	 SHORT $LN8@inflateBac
  0008d	5f		 pop	 edi
  0008e	5b		 pop	 ebx
  0008f	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00092	5e		 pop	 esi

; 70   : }

  00093	5d		 pop	 ebp
  00094	c2 14 00	 ret	 20			; 00000014H
$LN8@inflateBac:

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;

  00097	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 63   :     state->dmax = 32768U;
; 64   :     state->wbits = (uInt)windowBits;
; 65   :     state->wsize = 1U << windowBits;

  0009a	8b cf		 mov	 ecx, edi
  0009c	89 7a 28	 mov	 DWORD PTR [edx+40], edi
  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	5f		 pop	 edi
  000a5	d3 e0		 shl	 eax, cl

; 66   :     state->window = window;

  000a7	89 5a 38	 mov	 DWORD PTR [edx+56], ebx
  000aa	5b		 pop	 ebx
  000ab	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;
; 69   :     return Z_OK;

  000ae	33 c0		 xor	 eax, eax
  000b0	c7 42 18 00 80
	00 00		 mov	 DWORD PTR [edx+24], 32768 ; 00008000H
  000b7	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  000be	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000c5	5e		 pop	 esi

; 70   : }

  000c6	5d		 pop	 ebp
  000c7	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:
  000ca	5f		 pop	 edi
  000cb	5b		 pop	 ebx

; 42   :         return Z_STREAM_ERROR;

  000cc	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000d1	5e		 pop	 esi

; 70   : }

  000d2	5d		 pop	 ebp
  000d3	c2 14 00	 ret	 20			; 00000014H
$LN3@inflateBac:

; 38   :         stream_size != (int)(sizeof(z_stream)))
; 39   :         return Z_VERSION_ERROR;

  000d6	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  000db	5e		 pop	 esi

; 70   : }

  000dc	5d		 pop	 ebp
  000dd	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 85   : #ifdef BUILDFIXED
; 86   :     static int virgin = 1;
; 87   :     static code *lenfix, *distfix;
; 88   :     static code fixed[544];
; 89   : 
; 90   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 91   :     if (virgin) {
; 92   :         unsigned sym, bits;
; 93   :         static code *next;
; 94   : 
; 95   :         /* literal/length table */
; 96   :         sym = 0;
; 97   :         while (sym < 144) state->lens[sym++] = 8;
; 98   :         while (sym < 256) state->lens[sym++] = 9;
; 99   :         while (sym < 280) state->lens[sym++] = 7;
; 100  :         while (sym < 288) state->lens[sym++] = 8;
; 101  :         next = fixed;
; 102  :         lenfix = next;
; 103  :         bits = 9;
; 104  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 105  : 
; 106  :         /* distance table */
; 107  :         sym = 0;
; 108  :         while (sym < 32) state->lens[sym++] = 5;
; 109  :         distfix = next;
; 110  :         bits = 5;
; 111  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 112  : 
; 113  :         /* do this just once */
; 114  :         virgin = 0;
; 115  :     }
; 116  : #else /* !BUILDFIXED */
; 117  : #   include "inffixed.h"
; 118  : #endif /* BUILDFIXED */
; 119  :     state->lencode = lenfix;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?lenfix@?1??fixedtables@@9@9

; 120  :     state->lenbits = 9;

  00007	c7 41 58 09 00
	00 00		 mov	 DWORD PTR [ecx+88], 9

; 121  :     state->distcode = distfix;

  0000e	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], OFFSET ?distfix@?1??fixedtables@@9@9

; 122  :     state->distbits = 5;

  00015	c7 41 5c 05 00
	00 00		 mov	 DWORD PTR [ecx+92], 5

; 123  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
_from$1$ = -48						; size = 4
tv3643 = -48						; size = 4
tv3637 = -44						; size = 4
$T1 = -40						; size = 4
$T2 = -40						; size = 4
$T3 = -40						; size = 4
$T4 = -40						; size = 4
tv3688 = -40						; size = 4
tv3638 = -40						; size = 4
_copy$2$ = -40						; size = 4
$T5 = -36						; size = 4
$T6 = -36						; size = 4
$T7 = -36						; size = 4
tv3687 = -36						; size = 4
tv3628 = -36						; size = 4
tv3588 = -36						; size = 4
tv3587 = -36						; size = 4
tv3577 = -36						; size = 4
tv3640 = -32						; size = 4
_here$1$ = -28						; size = 4
_copy$1$ = -28						; size = 4
_last$ = -28						; size = 4
_put$1$ = -24						; size = 4
_left$1$ = -20						; size = 4
_bits$1$ = -16						; size = 4
_state$1$ = -12						; size = 4
_hold$1$ = -8						; size = 4
_next$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     struct inflate_state FAR *state;
; 258  :     z_const unsigned char FAR *next;    /* next input */
; 259  :     unsigned char FAR *put;     /* next output */
; 260  :     unsigned have, left;        /* available input and output */
; 261  :     unsigned long hold;         /* bit buffer */
; 262  :     unsigned bits;              /* bits in bit buffer */
; 263  :     unsigned copy;              /* number of stored or match bytes to copy */
; 264  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 265  :     code here;                  /* current decoding table entry */
; 266  :     code last;                  /* parent table entry */
; 267  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 268  :     int ret;                    /* return code */
; 269  :     static const unsigned short order[19] = /* permutation of code lengths */
; 270  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 271  : 
; 272  :     /* Check that the strm exists and that the state was initialized */
; 273  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 30	 sub	 esp, 48			; 00000030H
  00009	85 c9		 test	 ecx, ecx
  0000b	0f 84 7a 0d 00
	00		 je	 $LN254@inflateBac
  00011	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00014	89 55 f4	 mov	 DWORD PTR _state$1$[ebp], edx
  00017	85 d2		 test	 edx, edx
  00019	0f 84 6c 0d 00
	00		 je	 $LN254@inflateBac

; 275  :     state = (struct inflate_state FAR *)strm->state;
; 276  : 
; 277  :     /* Reset the state */
; 278  :     strm->msg = Z_NULL;

  0001f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00026	53		 push	 ebx

; 279  :     state->mode = TYPE;

  00027	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 280  :     state->last = 0;

  0002e	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 281  :     state->whave = 0;

  00035	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 282  :     next = strm->next_in;

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00041	56		 push	 esi
  00042	57		 push	 edi
  00043	85 c0		 test	 eax, eax

; 283  :     have = next != Z_NULL ? strm->avail_in : 0;

  00045	74 05		 je	 SHORT $LN343@inflateBac
  00047	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004a	eb 02		 jmp	 SHORT $LN344@inflateBac
$LN343@inflateBac:
  0004c	33 f6		 xor	 esi, esi
$LN344@inflateBac:

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;

  0004e	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00051	33 ff		 xor	 edi, edi
  00053	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00056	33 db		 xor	 ebx, ebx

; 287  :     left = state->wsize;

  00058	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0005b	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  0005e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00061	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00066	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00069	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0006c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0006f	0f 87 b3 0c 00
	00		 ja	 $LN341@inflateBac
$LN497@inflateBac:
  00075	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  00078	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN478@inflateBac[eax]
  0007f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN479@inflateBac[eax*4]
$LN255@inflateBac:

; 292  :         case TYPE:
; 293  :             /* determine and dispatch block type */
; 294  :             if (state->last) {

  00086	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0008a	74 1b		 je	 SHORT $LN12@inflateBac

; 295  :                 BYTEBITS();

  0008c	8b cb		 mov	 ecx, ebx

; 296  :                 state->mode = DONE;

  0008e	c7 42 04 50 3f
	00 00		 mov	 DWORD PTR [edx+4], 16208 ; 00003f50H
  00095	83 e1 07	 and	 ecx, 7
  00098	d3 ef		 shr	 edi, cl
  0009a	2b d9		 sub	 ebx, ecx
  0009c	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0009f	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 297  :                 break;

  000a2	e9 70 0c 00 00	 jmp	 $LN487@inflateBac
$LN12@inflateBac:

; 298  :             }
; 299  :             NEEDBITS(3);

  000a7	83 fb 03	 cmp	 ebx, 3
  000aa	73 3b		 jae	 SHORT $LN10@inflateBac
  000ac	0f 1f 40 00	 npad	 4
$LL13@inflateBac:
  000b0	85 f6		 test	 esi, esi
  000b2	75 15		 jne	 SHORT $LN18@inflateBac
  000b4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000bc	8b f0		 mov	 esi, eax
  000be	83 c4 08	 add	 esp, 8
  000c1	85 f6		 test	 esi, esi
  000c3	0f 84 7a 0c 00
	00		 je	 $LN369@inflateBac
$LN18@inflateBac:
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  000cc	8b cb		 mov	 ecx, ebx
  000ce	83 c3 08	 add	 ebx, 8
  000d1	4e		 dec	 esi
  000d2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000d5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  000d8	d3 e0		 shl	 eax, cl
  000da	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  000dd	03 f8		 add	 edi, eax
  000df	83 fb 03	 cmp	 ebx, 3
  000e2	72 cc		 jb	 SHORT $LL13@inflateBac
  000e4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN10@inflateBac:

; 300  :             state->last = BITS(1);

  000e7	8b c7		 mov	 eax, edi

; 301  :             DROPBITS(1);

  000e9	d1 ef		 shr	 edi, 1
  000eb	83 e0 01	 and	 eax, 1
  000ee	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 302  :             switch (BITS(2)) {

  000f1	8b c7		 mov	 eax, edi
  000f3	83 e0 03	 and	 eax, 3
  000f6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN480@inflateBac[eax*4]
$LN259@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  000fd	c1 ef 02	 shr	 edi, 2
  00100	83 eb 03	 sub	 ebx, 3
  00103	c7 42 04 41 3f
	00 00		 mov	 DWORD PTR [edx+4], 16193 ; 00003f41H
  0010a	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0010d	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00110	e9 02 0c 00 00	 jmp	 $LN487@inflateBac
$LN260@inflateBac:

; 303  :             case 0:                             /* stored block */
; 304  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 305  :                         state->last ? " (last)" : ""));
; 306  :                 state->mode = STORED;
; 307  :                 break;
; 308  :             case 1:                             /* fixed block */
; 309  :                 fixedtables(state);

  00115	8b ca		 mov	 ecx, edx
  00117	e8 00 00 00 00	 call	 _fixedtables

; 322  :             }
; 323  :             DROPBITS(2);

  0011c	c1 ef 02	 shr	 edi, 2
  0011f	83 eb 03	 sub	 ebx, 3
  00122	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
  00129	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0012c	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  0012f	e9 e3 0b 00 00	 jmp	 $LN487@inflateBac
$LN261@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  00134	c1 ef 02	 shr	 edi, 2
  00137	83 eb 03	 sub	 ebx, 3
  0013a	c7 42 04 44 3f
	00 00		 mov	 DWORD PTR [edx+4], 16196 ; 00003f44H
  00141	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00144	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00147	e9 cb 0b 00 00	 jmp	 $LN487@inflateBac
$LN262@inflateBac:

; 310  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 311  :                         state->last ? " (last)" : ""));
; 312  :                 state->mode = LEN;              /* decode codes */
; 313  :                 break;
; 314  :             case 2:                             /* dynamic block */
; 315  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 316  :                         state->last ? " (last)" : ""));
; 317  :                 state->mode = TABLE;
; 318  :                 break;
; 319  :             case 3:
; 320  :                 strm->msg = (char *)"invalid block type";

  0014c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0014f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type@

; 321  :                 state->mode = BAD;

  00156	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
$LN28@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  0015d	c1 ef 02	 shr	 edi, 2
  00160	83 eb 03	 sub	 ebx, 3
  00163	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00166	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00169	e9 a9 0b 00 00	 jmp	 $LN487@inflateBac
$LN31@inflateBac:

; 325  : 
; 326  :         case STORED:
; 327  :             /* get and verify stored block length */
; 328  :             BYTEBITS();                         /* go to byte boundary */

  0016e	8b cb		 mov	 ecx, ebx
  00170	83 e1 07	 and	 ecx, 7
  00173	2b d9		 sub	 ebx, ecx
  00175	d3 ef		 shr	 edi, cl
  00177	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0017a	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 329  :             NEEDBITS(32);

  0017d	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00180	73 3c		 jae	 SHORT $LN32@inflateBac
$LL35@inflateBac:
  00182	85 f6		 test	 esi, esi
  00184	75 17		 jne	 SHORT $LN40@inflateBac
  00186	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00189	50		 push	 eax
  0018a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0018d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00190	8b f0		 mov	 esi, eax
  00192	83 c4 08	 add	 esp, 8
  00195	85 f6		 test	 esi, esi
  00197	0f 84 a6 0b 00
	00		 je	 $LN369@inflateBac
$LN40@inflateBac:
  0019d	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  001a0	8b cb		 mov	 ecx, ebx
  001a2	83 c3 08	 add	 ebx, 8
  001a5	4e		 dec	 esi
  001a6	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  001a9	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  001ac	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  001af	d3 e0		 shl	 eax, cl
  001b1	03 f8		 add	 edi, eax
  001b3	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  001b6	83 fb 20	 cmp	 ebx, 32			; 00000020H
  001b9	72 c7		 jb	 SHORT $LL35@inflateBac
  001bb	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN32@inflateBac:

; 330  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  001be	8b c7		 mov	 eax, edi
  001c0	0f b7 cf	 movzx	 ecx, di
  001c3	f7 d0		 not	 eax
  001c5	89 4d d8	 mov	 DWORD PTR $T4[ebp], ecx
  001c8	c1 e8 10	 shr	 eax, 16			; 00000010H
  001cb	3b c8		 cmp	 ecx, eax
  001cd	74 16		 je	 SHORT $LN266@inflateBac

; 331  :                 strm->msg = (char *)"invalid stored block lengths";

  001cf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001d2	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@

; 332  :                 state->mode = BAD;

  001d9	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 333  :                 break;

  001e0	e9 32 0b 00 00	 jmp	 $LN487@inflateBac
$LN266@inflateBac:

; 334  :             }
; 335  :             state->length = (unsigned)hold & 0xffff;
; 336  :             Tracev((stderr, "inflate:       stored length %u\n",
; 337  :                     state->length));
; 338  :             INITBITS();

  001e5	33 ff		 xor	 edi, edi
  001e7	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  001ea	33 db		 xor	 ebx, ebx
  001ec	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  001ef	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 339  : 
; 340  :             /* copy stored block from input to output */
; 341  :             while (state->length != 0) {

  001f2	85 c9		 test	 ecx, ecx
  001f4	0f 84 95 00 00
	00		 je	 $LN47@inflateBac
  001fa	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  001fd	0f 1f 00	 npad	 3
$LL46@inflateBac:

; 342  :                 copy = state->length;
; 343  :                 PULL();

  00200	85 f6		 test	 esi, esi
  00202	75 1d		 jne	 SHORT $LN48@inflateBac
  00204	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00207	50		 push	 eax
  00208	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0020b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0020e	8b f0		 mov	 esi, eax
  00210	83 c4 08	 add	 esp, 8
  00213	85 f6		 test	 esi, esi
  00215	0f 84 36 0b 00
	00		 je	 $LN371@inflateBac
  0021b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0021e	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN48@inflateBac:

; 344  :                 ROOM();

  00221	85 c0		 test	 eax, eax
  00223	75 22		 jne	 SHORT $LN51@inflateBac
  00225	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00228	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0022b	51		 push	 ecx
  0022c	50		 push	 eax
  0022d	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00230	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00233	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  00236	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00239	ff 55 14	 call	 DWORD PTR _out$[ebp]
  0023c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023f	85 c0		 test	 eax, eax
  00241	0f 85 03 0b 00
	00		 jne	 $LN372@inflateBac
$LN51@inflateBac:

; 345  :                 if (copy > have) copy = have;
; 346  :                 if (copy > left) copy = left;

  00247	39 75 d8	 cmp	 DWORD PTR $T4[ebp], esi
  0024a	8b c6		 mov	 eax, esi

; 347  :                 zmemcpy(put, next, copy);

  0024c	8b 7d ec	 mov	 edi, DWORD PTR _left$1$[ebp]
  0024f	0f 46 45 d8	 cmovbe	 eax, DWORD PTR $T4[ebp]
  00253	3b c7		 cmp	 eax, edi
  00255	0f 46 f8	 cmovbe	 edi, eax
  00258	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  0025b	57		 push	 edi
  0025c	ff 75 fc	 push	 DWORD PTR _next$[ebp]
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 _memcpy

; 348  :                 have -= copy;
; 349  :                 next += copy;
; 350  :                 left -= copy;
; 351  :                 put += copy;
; 352  :                 state->length -= copy;

  00265	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00268	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026b	01 7d fc	 add	 DWORD PTR _next$[ebp], edi
  0026e	2b f7		 sub	 esi, edi
  00270	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  00273	01 7d e8	 add	 DWORD PTR _put$1$[ebp], edi
  00276	2b c7		 sub	 eax, edi
  00278	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  0027b	2b cf		 sub	 ecx, edi
  0027d	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax
  00280	89 4d d8	 mov	 DWORD PTR $T4[ebp], ecx
  00283	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  00286	0f 85 74 ff ff
	ff		 jne	 $LL46@inflateBac
  0028c	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN47@inflateBac:

; 353  :             }
; 354  :             Tracev((stderr, "inflate:       stored end\n"));
; 355  :             state->mode = TYPE;

  0028f	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 356  :             break;

  00296	e9 7c 0a 00 00	 jmp	 $LN487@inflateBac
$LN56@inflateBac:

; 357  : 
; 358  :         case TABLE:
; 359  :             /* get dynamic table entries descriptor */
; 360  :             NEEDBITS(14);

  0029b	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  0029e	73 37		 jae	 SHORT $LN54@inflateBac
$LL57@inflateBac:
  002a0	85 f6		 test	 esi, esi
  002a2	75 15		 jne	 SHORT $LN62@inflateBac
  002a4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  002a7	50		 push	 eax
  002a8	51		 push	 ecx
  002a9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  002ac	8b f0		 mov	 esi, eax
  002ae	83 c4 08	 add	 esp, 8
  002b1	85 f6		 test	 esi, esi
  002b3	0f 84 8a 0a 00
	00		 je	 $LN369@inflateBac
$LN62@inflateBac:
  002b9	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  002bc	8b cb		 mov	 ecx, ebx
  002be	83 c3 08	 add	 ebx, 8
  002c1	4e		 dec	 esi
  002c2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  002c5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  002c8	d3 e0		 shl	 eax, cl
  002ca	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  002cd	03 f8		 add	 edi, eax
  002cf	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  002d2	72 cc		 jb	 SHORT $LL57@inflateBac
  002d4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN54@inflateBac:

; 361  :             state->nlen = BITS(5) + 257;

  002d7	8b cf		 mov	 ecx, edi

; 362  :             DROPBITS(5);
; 363  :             state->ndist = BITS(5) + 1;
; 364  :             DROPBITS(5);
; 365  :             state->ncode = BITS(4) + 4;
; 366  :             DROPBITS(4);

  002d9	83 eb 0e	 sub	 ebx, 14			; 0000000eH
  002dc	c1 ef 05	 shr	 edi, 5
  002df	83 e1 1f	 and	 ecx, 31			; 0000001fH
  002e2	8b c7		 mov	 eax, edi
  002e4	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  002e7	83 e0 1f	 and	 eax, 31			; 0000001fH
  002ea	c1 ef 05	 shr	 edi, 5
  002ed	40		 inc	 eax
  002ee	81 c1 01 01 00
	00		 add	 ecx, 257		; 00000101H
  002f4	89 45 d8	 mov	 DWORD PTR tv3688[ebp], eax
  002f7	89 42 68	 mov	 DWORD PTR [edx+104], eax
  002fa	8b c7		 mov	 eax, edi
  002fc	83 e0 0f	 and	 eax, 15			; 0000000fH
  002ff	c1 ef 04	 shr	 edi, 4
  00302	83 c0 04	 add	 eax, 4
  00305	89 4a 64	 mov	 DWORD PTR [edx+100], ecx
  00308	89 45 dc	 mov	 DWORD PTR tv3687[ebp], eax
  0030b	89 42 60	 mov	 DWORD PTR [edx+96], eax
  0030e	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi

; 367  : #ifndef PKZIP_BUG_WORKAROUND
; 368  :             if (state->nlen > 286 || state->ndist > 30) {

  00311	81 f9 1e 01 00
	00		 cmp	 ecx, 286		; 0000011eH
  00317	0f 87 fb 04 00
	00		 ja	 $LN277@inflateBac
  0031d	83 7d d8 1e	 cmp	 DWORD PTR tv3688[ebp], 30 ; 0000001eH
  00321	0f 87 f1 04 00
	00		 ja	 $LN277@inflateBac

; 372  :             }
; 373  : #endif
; 374  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 375  : 
; 376  :             /* get code length code lengths (not a typo) */
; 377  :             state->have = 0;

  00327	33 c0		 xor	 eax, eax
  00329	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 378  :             while (state->have < state->ncode) {

  00330	39 45 dc	 cmp	 DWORD PTR tv3687[ebp], eax
  00333	76 6e		 jbe	 SHORT $LN352@inflateBac
$LL74@inflateBac:

; 379  :                 NEEDBITS(3);

  00335	83 fb 03	 cmp	 ebx, 3
  00338	73 3d		 jae	 SHORT $LN76@inflateBac
  0033a	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
  0033d	0f 1f 00	 npad	 3
$LL79@inflateBac:
  00340	85 f6		 test	 esi, esi
  00342	75 1a		 jne	 SHORT $LN84@inflateBac
  00344	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00347	50		 push	 eax
  00348	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0034b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0034e	8b f0		 mov	 esi, eax
  00350	83 c4 08	 add	 esp, 8
  00353	85 f6		 test	 esi, esi
  00355	0f 84 e8 09 00
	00		 je	 $LN369@inflateBac
  0035b	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN84@inflateBac:
  0035e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00361	8b cb		 mov	 ecx, ebx
  00363	d3 e0		 shl	 eax, cl
  00365	42		 inc	 edx
  00366	83 c3 08	 add	 ebx, 8
  00369	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  0036c	4e		 dec	 esi
  0036d	03 f8		 add	 edi, eax
  0036f	83 fb 03	 cmp	 ebx, 3
  00372	72 cc		 jb	 SHORT $LL79@inflateBac
  00374	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN76@inflateBac:

; 380  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  00377	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0037a	8b cf		 mov	 ecx, edi
  0037c	83 e1 07	 and	 ecx, 7

; 381  :                 DROPBITS(3);

  0037f	c1 ef 03	 shr	 edi, 3
  00382	83 eb 03	 sub	 ebx, 3
  00385	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00388	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0038b	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00393	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  00398	ff 42 6c	 inc	 DWORD PTR [edx+108]
  0039b	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0039e	3b 42 60	 cmp	 eax, DWORD PTR [edx+96]
  003a1	72 92		 jb	 SHORT $LL74@inflateBac
$LN352@inflateBac:

; 382  :             }
; 383  :             while (state->have < 19)

  003a3	83 f8 13	 cmp	 eax, 19			; 00000013H
  003a6	73 23		 jae	 SHORT $LN91@inflateBac
  003a8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL90@inflateBac:

; 384  :                 state->lens[order[state->have++]] = 0;

  003b0	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  003b3	33 c9		 xor	 ecx, ecx
  003b5	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  003bd	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  003c2	ff 42 6c	 inc	 DWORD PTR [edx+108]
  003c5	83 7a 6c 13	 cmp	 DWORD PTR [edx+108], 19	; 00000013H
  003c9	72 e5		 jb	 SHORT $LL90@inflateBac
$LN91@inflateBac:

; 385  :             state->next = state->codes;

  003cb	8d 4a 70	 lea	 ecx, DWORD PTR [edx+112]

; 386  :             state->lencode = (code const FAR *)(state->next);
; 387  :             state->lenbits = 7;

  003ce	c7 42 58 07 00
	00 00		 mov	 DWORD PTR [edx+88], 7
  003d5	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]
  003db	89 4d d0	 mov	 DWORD PTR tv3643[ebp], ecx
  003de	89 01		 mov	 DWORD PTR [ecx], eax
  003e0	89 42 50	 mov	 DWORD PTR [edx+80], eax
  003e3	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  003e6	89 45 e0	 mov	 DWORD PTR tv3640[ebp], eax

; 388  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  003e9	8d 82 f4 02 00
	00		 lea	 eax, DWORD PTR [edx+756]
  003ef	50		 push	 eax
  003f0	89 45 d8	 mov	 DWORD PTR tv3638[ebp], eax
  003f3	83 c2 74	 add	 edx, 116		; 00000074H
  003f6	8b 45 e0	 mov	 eax, DWORD PTR tv3640[ebp]
  003f9	50		 push	 eax
  003fa	51		 push	 ecx
  003fb	6a 13		 push	 19			; 00000013H
  003fd	33 c9		 xor	 ecx, ecx
  003ff	89 55 d4	 mov	 DWORD PTR tv3637[ebp], edx
  00402	e8 00 00 00 00	 call	 _inflate_table

; 389  :                                 &(state->lenbits), state->work);
; 390  :             if (ret) {

  00407	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0040a	83 c4 10	 add	 esp, 16			; 00000010H
  0040d	85 c0		 test	 eax, eax
  0040f	74 16		 je	 SHORT $LN280@inflateBac

; 391  :                 strm->msg = (char *)"invalid code lengths set";

  00411	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00414	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@

; 392  :                 state->mode = BAD;

  0041b	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 393  :                 break;

  00422	e9 f0 08 00 00	 jmp	 $LN487@inflateBac
$LN280@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00427	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0042a	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  0042d	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0
  00434	03 c1		 add	 eax, ecx
  00436	0f 84 78 02 00
	00		 je	 $LN93@inflateBac
  0043c	0f 1f 40 00	 npad	 4
$LL92@inflateBac:

; 400  :                 for (;;) {
; 401  :                     here = state->lencode[BITS(state->lenbits)];

  00440	8b 45 e0	 mov	 eax, DWORD PTR tv3640[ebp]
  00443	ba 01 00 00 00	 mov	 edx, 1
  00448	8b 08		 mov	 ecx, DWORD PTR [eax]
  0044a	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  0044d	d3 e2		 shl	 edx, cl
  0044f	4a		 dec	 edx
  00450	23 d7		 and	 edx, edi

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  00452	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00455	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00458	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0045b	8b c8		 mov	 ecx, eax
  0045d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00460	8b d0		 mov	 edx, eax
  00462	c1 ea 08	 shr	 edx, 8
  00465	89 4d dc	 mov	 DWORD PTR $T6[ebp], ecx
  00468	0f b6 ca	 movzx	 ecx, dl
  0046b	89 45 e4	 mov	 DWORD PTR _here$1$[ebp], eax
  0046e	3b cb		 cmp	 ecx, ebx
  00470	76 60		 jbe	 SHORT $LN375@inflateBac
$LL94@inflateBac:

; 403  :                     PULLBYTE();

  00472	85 f6		 test	 esi, esi
  00474	75 1a		 jne	 SHORT $LN100@inflateBac
  00476	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00479	50		 push	 eax
  0047a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0047d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00480	8b f0		 mov	 esi, eax
  00482	83 c4 08	 add	 esp, 8
  00485	85 f6		 test	 esi, esi
  00487	0f 84 b6 08 00
	00		 je	 $LN369@inflateBac
  0048d	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN100@inflateBac:
  00490	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00493	8b cb		 mov	 ecx, ebx
  00495	d3 e0		 shl	 eax, cl
  00497	47		 inc	 edi
  00498	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  0049b	ba 01 00 00 00	 mov	 edx, 1
  004a0	8b 45 e0	 mov	 eax, DWORD PTR tv3640[ebp]
  004a3	83 c3 08	 add	 ebx, 8
  004a6	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  004a9	4e		 dec	 esi
  004aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ac	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  004af	d3 e2		 shl	 edx, cl
  004b1	4a		 dec	 edx
  004b2	23 55 f8	 and	 edx, DWORD PTR _hold$1$[ebp]
  004b5	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  004b8	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  004bb	8b c8		 mov	 ecx, eax
  004bd	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004c0	8b d0		 mov	 edx, eax
  004c2	c1 ea 08	 shr	 edx, 8
  004c5	89 4d dc	 mov	 DWORD PTR $T6[ebp], ecx
  004c8	0f b6 ca	 movzx	 ecx, dl
  004cb	89 45 e4	 mov	 DWORD PTR _here$1$[ebp], eax
  004ce	3b cb		 cmp	 ecx, ebx
  004d0	77 a0		 ja	 SHORT $LL94@inflateBac
$LN375@inflateBac:

; 404  :                 }
; 405  :                 if (here.val < 16) {

  004d2	8b 4d dc	 mov	 ecx, DWORD PTR $T6[ebp]
  004d5	0f b7 c9	 movzx	 ecx, cx
  004d8	89 4d dc	 mov	 DWORD PTR tv3577[ebp], ecx
  004db	0f b7 c9	 movzx	 ecx, cx
  004de	83 f9 10	 cmp	 ecx, 16			; 00000010H
  004e1	73 29		 jae	 SHORT $LN284@inflateBac

; 406  :                     DROPBITS(here.bits);

  004e3	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  004e6	0f b6 ca	 movzx	 ecx, dl

; 407  :                     state->lens[state->have++] = here.val;

  004e9	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  004ec	2b d9		 sub	 ebx, ecx
  004ee	d3 ef		 shr	 edi, cl
  004f0	c1 e8 10	 shr	 eax, 16			; 00000010H
  004f3	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  004f6	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  004f9	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  004fc	66 89 44 4a 74	 mov	 WORD PTR [edx+ecx*2+116], ax
  00501	ff 42 6c	 inc	 DWORD PTR [edx+108]
  00504	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]

; 408  :                 }

  00507	e9 91 01 00 00	 jmp	 $LN406@inflateBac
$LN284@inflateBac:

; 409  :                 else {
; 410  :                     if (here.val == 16) {

  0050c	0f b6 c2	 movzx	 eax, dl
  0050f	0f 85 7f 00 00
	00		 jne	 $LN286@inflateBac

; 411  :                         NEEDBITS(here.bits + 2);

  00515	83 c0 02	 add	 eax, 2
  00518	89 45 dc	 mov	 DWORD PTR tv3628[ebp], eax
  0051b	3b d8		 cmp	 ebx, eax
  0051d	73 36		 jae	 SHORT $LN106@inflateBac
  0051f	90		 npad	 1
$LL109@inflateBac:
  00520	85 f6		 test	 esi, esi
  00522	75 1a		 jne	 SHORT $LN114@inflateBac
  00524	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00527	50		 push	 eax
  00528	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0052b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0052e	8b f0		 mov	 esi, eax
  00530	83 c4 08	 add	 esp, 8
  00533	85 f6		 test	 esi, esi
  00535	0f 84 08 08 00
	00		 je	 $LN369@inflateBac
  0053b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN114@inflateBac:
  0053e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00541	8b cb		 mov	 ecx, ebx
  00543	d3 e0		 shl	 eax, cl
  00545	47		 inc	 edi
  00546	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00549	83 c3 08	 add	 ebx, 8
  0054c	4e		 dec	 esi
  0054d	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00550	3b 5d dc	 cmp	 ebx, DWORD PTR tv3628[ebp]
  00553	72 cb		 jb	 SHORT $LL109@inflateBac
$LN106@inflateBac:

; 412  :                         DROPBITS(here.bits);
; 413  :                         if (state->have == 0) {

  00555	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00558	8b 45 e4	 mov	 eax, DWORD PTR _here$1$[ebp]
  0055b	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0055e	0f b6 cc	 movzx	 ecx, ah
  00561	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00564	2b d9		 sub	 ebx, ecx
  00566	d3 ef		 shr	 edi, cl
  00568	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0056b	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0056e	85 c0		 test	 eax, eax
  00570	0f 84 6b 01 00
	00		 je	 $LN380@inflateBac

; 414  :                             strm->msg = (char *)"invalid bit length repeat";
; 415  :                             state->mode = BAD;
; 416  :                             break;
; 417  :                         }
; 418  :                         len = (unsigned)(state->lens[state->have - 1]);
; 419  :                         copy = 3 + BITS(2);
; 420  :                         DROPBITS(2);

  00576	0f b7 44 42 72	 movzx	 eax, WORD PTR [edx+eax*2+114]
  0057b	8b cf		 mov	 ecx, edi
  0057d	83 e1 03	 and	 ecx, 3
  00580	c1 ef 02	 shr	 edi, 2
  00583	83 c1 03	 add	 ecx, 3
  00586	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
  00589	89 4d e4	 mov	 DWORD PTR _copy$1$[ebp], ecx
  0058c	83 eb 02	 sub	 ebx, 2

; 421  :                     }

  0058f	e9 d1 00 00 00	 jmp	 $LN495@inflateBac
$LN286@inflateBac:

; 422  :                     else if (here.val == 17) {

  00594	66 83 7d dc 11	 cmp	 WORD PTR tv3577[ebp], 17 ; 00000011H
  00599	75 5f		 jne	 SHORT $LN142@inflateBac

; 423  :                         NEEDBITS(here.bits + 3);

  0059b	83 c0 03	 add	 eax, 3
  0059e	89 45 dc	 mov	 DWORD PTR tv3588[ebp], eax
  005a1	3b d8		 cmp	 ebx, eax
  005a3	73 35		 jae	 SHORT $LN123@inflateBac
$LL126@inflateBac:
  005a5	85 f6		 test	 esi, esi
  005a7	75 1a		 jne	 SHORT $LN131@inflateBac
  005a9	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  005ac	50		 push	 eax
  005ad	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  005b0	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005b3	8b f0		 mov	 esi, eax
  005b5	83 c4 08	 add	 esp, 8
  005b8	85 f6		 test	 esi, esi
  005ba	0f 84 83 07 00
	00		 je	 $LN369@inflateBac
  005c0	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN131@inflateBac:
  005c3	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  005c6	8b cb		 mov	 ecx, ebx
  005c8	d3 e0		 shl	 eax, cl
  005ca	47		 inc	 edi
  005cb	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  005ce	83 c3 08	 add	 ebx, 8
  005d1	4e		 dec	 esi
  005d2	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  005d5	3b 5d dc	 cmp	 ebx, DWORD PTR tv3588[ebp]
  005d8	72 cb		 jb	 SHORT $LL126@inflateBac
$LN123@inflateBac:

; 424  :                         DROPBITS(here.bits);

  005da	8b 45 e4	 mov	 eax, DWORD PTR _here$1$[ebp]
  005dd	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  005e0	0f b6 cc	 movzx	 ecx, ah
  005e3	d3 ef		 shr	 edi, cl

; 425  :                         len = 0;
; 426  :                         copy = 3 + BITS(3);

  005e5	8b c7		 mov	 eax, edi
  005e7	83 e0 07	 and	 eax, 7
  005ea	83 c0 03	 add	 eax, 3

; 427  :                         DROPBITS(3);

  005ed	c1 ef 03	 shr	 edi, 3
  005f0	89 45 e4	 mov	 DWORD PTR _copy$1$[ebp], eax
  005f3	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 428  :                     }

  005f8	eb 5d		 jmp	 SHORT $LN496@inflateBac
$LN142@inflateBac:

; 429  :                     else {
; 430  :                         NEEDBITS(here.bits + 7);

  005fa	83 c0 07	 add	 eax, 7
  005fd	89 45 dc	 mov	 DWORD PTR tv3587[ebp], eax
  00600	3b d8		 cmp	 ebx, eax
  00602	73 35		 jae	 SHORT $LN140@inflateBac
$LL143@inflateBac:
  00604	85 f6		 test	 esi, esi
  00606	75 1a		 jne	 SHORT $LN148@inflateBac
  00608	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0060b	50		 push	 eax
  0060c	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0060f	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00612	8b f0		 mov	 esi, eax
  00614	83 c4 08	 add	 esp, 8
  00617	85 f6		 test	 esi, esi
  00619	0f 84 24 07 00
	00		 je	 $LN369@inflateBac
  0061f	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN148@inflateBac:
  00622	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00625	8b cb		 mov	 ecx, ebx
  00627	d3 e0		 shl	 eax, cl
  00629	47		 inc	 edi
  0062a	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  0062d	83 c3 08	 add	 ebx, 8
  00630	4e		 dec	 esi
  00631	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00634	3b 5d dc	 cmp	 ebx, DWORD PTR tv3587[ebp]
  00637	72 cb		 jb	 SHORT $LL143@inflateBac
$LN140@inflateBac:

; 431  :                         DROPBITS(here.bits);

  00639	8b 45 e4	 mov	 eax, DWORD PTR _here$1$[ebp]
  0063c	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0063f	0f b6 cc	 movzx	 ecx, ah
  00642	d3 ef		 shr	 edi, cl

; 432  :                         len = 0;
; 433  :                         copy = 11 + BITS(7);

  00644	8b c7		 mov	 eax, edi
  00646	83 e0 7f	 and	 eax, 127		; 0000007fH
  00649	83 c0 0b	 add	 eax, 11			; 0000000bH

; 434  :                         DROPBITS(7);

  0064c	c1 ef 07	 shr	 edi, 7
  0064f	89 45 e4	 mov	 DWORD PTR _copy$1$[ebp], eax
  00652	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN496@inflateBac:

; 435  :                     }
; 436  :                     if (state->have + copy > state->nlen + state->ndist) {

  00657	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0065a	2b c1		 sub	 eax, ecx
  0065c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00663	03 d8		 add	 ebx, eax
$LN495@inflateBac:
  00665	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00668	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0066b	03 4d e4	 add	 ecx, DWORD PTR _copy$1$[ebp]
  0066e	03 42 64	 add	 eax, DWORD PTR [edx+100]
  00671	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00674	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00677	3b c8		 cmp	 ecx, eax
  00679	77 66		 ja	 SHORT $LN380@inflateBac
  0067b	8b 7d e4	 mov	 edi, DWORD PTR _copy$1$[ebp]
  0067e	8b 5d dc	 mov	 ebx, DWORD PTR $T5[ebp]
$LL157@inflateBac:

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)
; 442  :                         state->lens[state->have++] = (unsigned short)len;

  00681	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00684	66 89 5c 42 74	 mov	 WORD PTR [edx+eax*2+116], bx
  00689	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0068c	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0068f	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx
  00692	83 ef 01	 sub	 edi, 1
  00695	75 ea		 jne	 SHORT $LL157@inflateBac
  00697	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  0069a	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN406@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  0069d	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  006a0	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
  006a3	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  006a6	03 45 dc	 add	 eax, DWORD PTR $T7[ebp]
  006a9	3b c8		 cmp	 ecx, eax
  006ab	0f 82 8f fd ff
	ff		 jb	 $LL92@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  006b1	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
$LN93@inflateBac:

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  006b4	81 7a 04 51 3f
	00 00		 cmp	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006bb	0f 84 56 06 00
	00		 je	 $LN487@inflateBac

; 448  : 
; 449  :             /* check for end-of-block code (better have one) */
; 450  :             if (state->lens[256] == 0) {

  006c1	66 83 ba 74 02
	00 00 00	 cmp	 WORD PTR [edx+628], 0
  006c9	75 2c		 jne	 SHORT $LN299@inflateBac

; 451  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006cb	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006ce	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@

; 452  :                 state->mode = BAD;

  006d5	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 453  :                 break;

  006dc	e9 36 06 00 00	 jmp	 $LN487@inflateBac
$LN380@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  006e1	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006e4	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
  006eb	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006f2	e9 20 06 00 00	 jmp	 $LN487@inflateBac
$LN299@inflateBac:

; 454  :             }
; 455  : 
; 456  :             /* build code tables -- note: do not change the lenbits or distbits
; 457  :                values here (9 and 6) without reading the comments in inftrees.h
; 458  :                concerning the ENOUGH constants, which depend on those values */
; 459  :             state->next = state->codes;
; 460  :             state->lencode = (code const FAR *)(state->next);
; 461  :             state->lenbits = 9;
; 462  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  006f7	ff 75 d8	 push	 DWORD PTR tv3638[ebp]
  006fa	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]
  00700	c7 42 58 09 00
	00 00		 mov	 DWORD PTR [edx+88], 9
  00707	89 42 70	 mov	 DWORD PTR [edx+112], eax
  0070a	89 42 50	 mov	 DWORD PTR [edx+80], eax
  0070d	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  00710	50		 push	 eax
  00711	8d 42 70	 lea	 eax, DWORD PTR [edx+112]
  00714	8b 55 d4	 mov	 edx, DWORD PTR tv3637[ebp]
  00717	50		 push	 eax
  00718	51		 push	 ecx
  00719	b9 01 00 00 00	 mov	 ecx, 1
  0071e	e8 00 00 00 00	 call	 _inflate_table
  00723	83 c4 10	 add	 esp, 16			; 00000010H

; 463  :                                 &(state->lenbits), state->work);
; 464  :             if (ret) {

  00726	85 c0		 test	 eax, eax
  00728	74 19		 je	 SHORT $LN300@inflateBac

; 465  :                 strm->msg = (char *)"invalid literal/lengths set";

  0072a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 466  :                 state->mode = BAD;

  0072d	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00730	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
  00737	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 467  :                 break;

  0073e	e9 d4 05 00 00	 jmp	 $LN487@inflateBac
$LN300@inflateBac:

; 468  :             }
; 469  :             state->distcode = (code const FAR *)(state->next);

  00743	8b 4d f4	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00746	8b 55 d0	 mov	 edx, DWORD PTR tv3643[ebp]

; 470  :             state->distbits = 6;
; 471  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  00749	ff 75 d8	 push	 DWORD PTR tv3638[ebp]
  0074c	c7 41 5c 06 00
	00 00		 mov	 DWORD PTR [ecx+92], 6
  00753	8b 02		 mov	 eax, DWORD PTR [edx]
  00755	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  00758	8d 41 5c	 lea	 eax, DWORD PTR [ecx+92]
  0075b	50		 push	 eax
  0075c	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  0075f	52		 push	 edx
  00760	ff 71 68	 push	 DWORD PTR [ecx+104]
  00763	83 c1 74	 add	 ecx, 116		; 00000074H
  00766	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00769	b9 02 00 00 00	 mov	 ecx, 2
  0076e	e8 00 00 00 00	 call	 _inflate_table

; 472  :                             &(state->next), &(state->distbits), state->work);
; 473  :             if (ret) {

  00773	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00776	83 c4 10	 add	 esp, 16			; 00000010H
  00779	85 c0		 test	 eax, eax
  0077b	74 16		 je	 SHORT $LN301@inflateBac

; 474  :                 strm->msg = (char *)"invalid distances set";

  0077d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00780	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@

; 475  :                 state->mode = BAD;

  00787	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 476  :                 break;

  0078e	e9 84 05 00 00	 jmp	 $LN487@inflateBac
$LN301@inflateBac:

; 477  :             }
; 478  :             Tracev((stderr, "inflate:       codes ok\n"));
; 479  :             state->mode = LEN;

  00793	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
$LN302@inflateBac:

; 480  : 
; 481  :         case LEN:
; 482  :             /* use inflate_fast() if we have enough input and output */
; 483  :             if (have >= 6 && left >= 258) {

  0079a	83 fe 06	 cmp	 esi, 6
  0079d	0f 82 8b 00 00
	00		 jb	 $LN303@inflateBac
  007a3	8b 4d ec	 mov	 ecx, DWORD PTR _left$1$[ebp]
  007a6	81 f9 02 01 00
	00		 cmp	 ecx, 258		; 00000102H
  007ac	0f 82 7c 00 00
	00		 jb	 $LN303@inflateBac

; 484  :                 RESTORE();

  007b2	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007b5	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  007b8	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  007bb	8b c2		 mov	 eax, edx
  007bd	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  007c0	8b ca		 mov	 ecx, edx
  007c2	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007c5	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  007c8	89 01		 mov	 DWORD PTR [ecx], eax
  007ca	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 485  :                 if (state->whave < state->wsize)

  007cd	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  007d0	89 7a 3c	 mov	 DWORD PTR [edx+60], edi
  007d3	89 5a 40	 mov	 DWORD PTR [edx+64], ebx
  007d6	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  007d9	73 08		 jae	 SHORT $LN304@inflateBac

; 486  :                     state->whave = state->wsize - left;

  007db	8b c1		 mov	 eax, ecx
  007dd	2b 45 ec	 sub	 eax, DWORD PTR _left$1$[ebp]
  007e0	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN304@inflateBac:

; 487  :                 inflate_fast(strm, state->wsize);

  007e3	8b d1		 mov	 edx, ecx
  007e5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007e8	e8 00 00 00 00	 call	 _inflate_fast

; 488  :                 LOAD();

  007ed	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007f0	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007f3	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  007f6	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  007f9	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  007fc	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  007ff	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax
  00802	8b 01		 mov	 eax, DWORD PTR [ecx]
  00804	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00807	8b 7a 3c	 mov	 edi, DWORD PTR [edx+60]
  0080a	8b 5a 40	 mov	 ebx, DWORD PTR [edx+64]
  0080d	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00810	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 489  :                 break;

  00813	e9 ff 04 00 00	 jmp	 $LN487@inflateBac
$LN277@inflateBac:

; 369  :                 strm->msg = (char *)"too many length or distance symbols";

  00818	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0081b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@

; 370  :                 state->mode = BAD;

  00822	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 371  :                 break;

  00829	e9 e9 04 00 00	 jmp	 $LN487@inflateBac
$LN303@inflateBac:

; 490  :             }
; 491  : 
; 492  :             /* get a literal, length, or end-of-block code */
; 493  :             for (;;) {
; 494  :                 here = state->lencode[BITS(state->lenbits)];

  0082e	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00831	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00834	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  00837	b8 01 00 00 00	 mov	 eax, 1
  0083c	d3 e0		 shl	 eax, cl
  0083e	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  00841	48		 dec	 eax
  00842	23 c7		 and	 eax, edi
  00844	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00847	8b c8		 mov	 ecx, eax
  00849	c1 e9 08	 shr	 ecx, 8
  0084c	0f b6 c9	 movzx	 ecx, cl

; 495  :                 if ((unsigned)(here.bits) <= bits) break;

  0084f	3b cb		 cmp	 ecx, ebx
  00851	76 5c		 jbe	 SHORT $LN382@inflateBac
$LL165@inflateBac:

; 496  :                 PULLBYTE();

  00853	85 f6		 test	 esi, esi
  00855	75 1a		 jne	 SHORT $LN171@inflateBac
  00857	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0085a	50		 push	 eax
  0085b	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0085e	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00861	8b f0		 mov	 esi, eax
  00863	83 c4 08	 add	 esp, 8
  00866	85 f6		 test	 esi, esi
  00868	0f 84 d5 04 00
	00		 je	 $LN369@inflateBac
  0086e	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN171@inflateBac:
  00871	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00874	8b cb		 mov	 ecx, ebx
  00876	83 c3 08	 add	 ebx, 8
  00879	4e		 dec	 esi
  0087a	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0087d	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00880	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00883	d3 e0		 shl	 eax, cl
  00885	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00888	03 f8		 add	 edi, eax
  0088a	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0088d	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  00890	b8 01 00 00 00	 mov	 eax, 1
  00895	d3 e0		 shl	 eax, cl
  00897	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  0089a	48		 dec	 eax
  0089b	23 c7		 and	 eax, edi
  0089d	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  008a0	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  008a3	8b c8		 mov	 ecx, eax
  008a5	c1 e9 08	 shr	 ecx, 8
  008a8	0f b6 c9	 movzx	 ecx, cl
  008ab	3b cb		 cmp	 ecx, ebx
  008ad	77 a4		 ja	 SHORT $LL165@inflateBac
$LN382@inflateBac:

; 497  :             }
; 498  :             if (here.op && (here.op & 0xf0) == 0) {

  008af	84 c0		 test	 al, al
  008b1	0f 84 c2 00 00
	00		 je	 $LN184@inflateBac
  008b7	a8 f0		 test	 al, 240			; 000000f0H
  008b9	0f 85 ba 00 00
	00		 jne	 $LN184@inflateBac

; 499  :                 last = here;

  008bf	8b c8		 mov	 ecx, eax

; 500  :                 for (;;) {
; 501  :                     here = state->lencode[last.val +

  008c1	bf 01 00 00 00	 mov	 edi, 1
  008c6	c1 e9 08	 shr	 ecx, 8
  008c9	8b d0		 mov	 edx, eax
  008cb	0f b6 d9	 movzx	 ebx, cl
  008ce	0f b6 c8	 movzx	 ecx, al
  008d1	03 cb		 add	 ecx, ebx
  008d3	c1 e8 10	 shr	 eax, 16			; 00000010H
  008d6	d3 e7		 shl	 edi, cl
  008d8	8b cb		 mov	 ecx, ebx
  008da	4f		 dec	 edi
  008db	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  008de	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  008e1	d3 ef		 shr	 edi, cl
  008e3	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
  008e6	03 f8		 add	 edi, eax
  008e8	8b 04 b9	 mov	 eax, DWORD PTR [ecx+edi*4]
  008eb	8b c8		 mov	 ecx, eax
  008ed	c1 e9 08	 shr	 ecx, 8

; 502  :                             (BITS(last.bits + last.op) >> last.bits)];
; 503  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  008f0	0f b6 c9	 movzx	 ecx, cl
  008f3	03 cb		 add	 ecx, ebx
  008f5	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  008f8	3b cb		 cmp	 ecx, ebx
  008fa	76 70		 jbe	 SHORT $LN185@inflateBac
  008fc	0f 1f 40 00	 npad	 4
$LL174@inflateBac:

; 504  :                     PULLBYTE();

  00900	85 f6		 test	 esi, esi
  00902	75 1a		 jne	 SHORT $LN180@inflateBac
  00904	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00907	50		 push	 eax
  00908	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0090b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0090e	8b f0		 mov	 esi, eax
  00910	83 c4 08	 add	 esp, 8
  00913	85 f6		 test	 esi, esi
  00915	0f 84 28 04 00
	00		 je	 $LN369@inflateBac
  0091b	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN180@inflateBac:
  0091e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00921	8b cb		 mov	 ecx, ebx
  00923	83 c3 08	 add	 ebx, 8
  00926	bf 01 00 00 00	 mov	 edi, 1
  0092b	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0092e	4e		 dec	 esi
  0092f	0f b6 de	 movzx	 ebx, dh
  00932	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00935	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00938	d3 e0		 shl	 eax, cl
  0093a	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  0093d	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00941	0f b6 ca	 movzx	 ecx, dl
  00944	03 cb		 add	 ecx, ebx
  00946	d3 e7		 shl	 edi, cl
  00948	8b cb		 mov	 ecx, ebx
  0094a	4f		 dec	 edi
  0094b	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  0094e	d3 ef		 shr	 edi, cl
  00950	03 f8		 add	 edi, eax
  00952	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00955	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00958	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0095b	8b c8		 mov	 ecx, eax
  0095d	c1 e9 08	 shr	 ecx, 8
  00960	0f b6 c9	 movzx	 ecx, cl
  00963	03 cb		 add	 ecx, ebx
  00965	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00968	3b cb		 cmp	 ecx, ebx
  0096a	77 94		 ja	 SHORT $LL174@inflateBac
$LN185@inflateBac:

; 505  :                 }
; 506  :                 DROPBITS(last.bits);

  0096c	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0096f	0f b6 ce	 movzx	 ecx, dh
  00972	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00975	d3 ef		 shr	 edi, cl
  00977	2b d9		 sub	 ebx, ecx
$LN184@inflateBac:

; 507  :             }
; 508  :             DROPBITS(here.bits);

  00979	8b c8		 mov	 ecx, eax
  0097b	c1 e9 08	 shr	 ecx, 8
  0097e	0f b6 c9	 movzx	 ecx, cl
  00981	d3 ef		 shr	 edi, cl
  00983	2b d9		 sub	 ebx, ecx

; 509  :             state->length = (unsigned)here.val;

  00985	8b c8		 mov	 ecx, eax
  00987	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0098a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0098d	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00990	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 510  : 
; 511  :             /* process literal */
; 512  :             if (here.op == 0) {

  00993	84 c0		 test	 al, al
  00995	75 46		 jne	 SHORT $LN312@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  00997	83 7d ec 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  0099b	75 25		 jne	 SHORT $LN189@inflateBac
  0099d	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  009a0	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  009a3	51		 push	 ecx
  009a4	50		 push	 eax
  009a5	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  009a8	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  009ab	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  009ae	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  009b1	ff 55 14	 call	 DWORD PTR _out$[ebp]
  009b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  009b7	85 c0		 test	 eax, eax
  009b9	0f 85 8b 03 00
	00		 jne	 $LN372@inflateBac
  009bf	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN189@inflateBac:

; 517  :                 *put++ = (unsigned char)(state->length);

  009c2	8b 4d e8	 mov	 ecx, DWORD PTR _put$1$[ebp]
  009c5	8a 42 44	 mov	 al, BYTE PTR [edx+68]
  009c8	88 01		 mov	 BYTE PTR [ecx], al
  009ca	41		 inc	 ecx

; 518  :                 left--;

  009cb	ff 4d ec	 dec	 DWORD PTR _left$1$[ebp]
  009ce	89 4d e8	 mov	 DWORD PTR _put$1$[ebp], ecx

; 519  :                 state->mode = LEN;

  009d1	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H

; 520  :                 break;

  009d8	e9 3a 03 00 00	 jmp	 $LN487@inflateBac
$LN312@inflateBac:

; 521  :             }
; 522  : 
; 523  :             /* process end of block */
; 524  :             if (here.op & 32) {

  009dd	a8 20		 test	 al, 32			; 00000020H
  009df	74 0c		 je	 SHORT $LN315@inflateBac

; 525  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 526  :                 state->mode = TYPE;

  009e1	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 527  :                 break;

  009e8	e9 2a 03 00 00	 jmp	 $LN487@inflateBac
$LN315@inflateBac:

; 528  :             }
; 529  : 
; 530  :             /* invalid code */
; 531  :             if (here.op & 64) {

  009ed	a8 40		 test	 al, 64			; 00000040H
  009ef	74 16		 je	 SHORT $LN316@inflateBac

; 532  :                 strm->msg = (char *)"invalid literal/length code";

  009f1	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  009f4	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@

; 533  :                 state->mode = BAD;

  009fb	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 534  :                 break;

  00a02	e9 10 03 00 00	 jmp	 $LN487@inflateBac
$LN316@inflateBac:

; 535  :             }
; 536  : 
; 537  :             /* length code -- get extra bits, if any */
; 538  :             state->extra = (unsigned)(here.op) & 15;

  00a07	0f b6 c8	 movzx	 ecx, al
  00a0a	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00a0d	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 539  :             if (state->extra != 0) {

  00a10	74 61		 je	 SHORT $LN204@inflateBac

; 540  :                 NEEDBITS(state->extra);

  00a12	3b d9		 cmp	 ebx, ecx
  00a14	73 46		 jae	 SHORT $LN192@inflateBac
  00a16	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a19	0f 1f 80 00 00
	00 00		 npad	 7
$LL195@inflateBac:
  00a20	85 f6		 test	 esi, esi
  00a22	75 1d		 jne	 SHORT $LN200@inflateBac
  00a24	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00a27	50		 push	 eax
  00a28	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a2b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a2e	8b f0		 mov	 esi, eax
  00a30	83 c4 08	 add	 esp, 8
  00a33	85 f6		 test	 esi, esi
  00a35	0f 84 08 03 00
	00		 je	 $LN369@inflateBac
  00a3b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00a3e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN200@inflateBac:
  00a41	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a44	8b cb		 mov	 ecx, ebx
  00a46	d3 e0		 shl	 eax, cl
  00a48	83 c3 08	 add	 ebx, 8
  00a4b	03 f8		 add	 edi, eax
  00a4d	4e		 dec	 esi
  00a4e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a51	40		 inc	 eax
  00a52	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00a55	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00a58	3b d9		 cmp	 ebx, ecx
  00a5a	72 c4		 jb	 SHORT $LL195@inflateBac
$LN192@inflateBac:

; 541  :                 state->length += BITS(state->extra);

  00a5c	b8 01 00 00 00	 mov	 eax, 1
  00a61	d3 e0		 shl	 eax, cl
  00a63	48		 dec	 eax
  00a64	23 c7		 and	 eax, edi

; 542  :                 DROPBITS(state->extra);

  00a66	d3 ef		 shr	 edi, cl
  00a68	01 42 44	 add	 DWORD PTR [edx+68], eax
  00a6b	2b d9		 sub	 ebx, ecx
  00a6d	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00a70	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN204@inflateBac:

; 543  :             }
; 544  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 545  : 
; 546  :             /* get distance code */
; 547  :             for (;;) {
; 548  :                 here = state->distcode[BITS(state->distbits)];

  00a73	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00a76	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00a79	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
  00a7c	b8 01 00 00 00	 mov	 eax, 1
  00a81	d3 e0		 shl	 eax, cl
  00a83	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00a86	48		 dec	 eax
  00a87	23 c7		 and	 eax, edi
  00a89	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00a8c	8b c8		 mov	 ecx, eax
  00a8e	c1 e9 08	 shr	 ecx, 8
  00a91	0f b6 c9	 movzx	 ecx, cl

; 549  :                 if ((unsigned)(here.bits) <= bits) break;

  00a94	3b cb		 cmp	 ecx, ebx
  00a96	76 5c		 jbe	 SHORT $LN486@inflateBac
$LL206@inflateBac:

; 550  :                 PULLBYTE();

  00a98	85 f6		 test	 esi, esi
  00a9a	75 1a		 jne	 SHORT $LN212@inflateBac
  00a9c	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00a9f	50		 push	 eax
  00aa0	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00aa3	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00aa6	8b f0		 mov	 esi, eax
  00aa8	83 c4 08	 add	 esp, 8
  00aab	85 f6		 test	 esi, esi
  00aad	0f 84 90 02 00
	00		 je	 $LN369@inflateBac
  00ab3	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN212@inflateBac:
  00ab6	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00ab9	8b cb		 mov	 ecx, ebx
  00abb	83 c3 08	 add	 ebx, 8
  00abe	4e		 dec	 esi
  00abf	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00ac2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00ac5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00ac8	d3 e0		 shl	 eax, cl
  00aca	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00acd	03 f8		 add	 edi, eax
  00acf	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00ad2	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
  00ad5	b8 01 00 00 00	 mov	 eax, 1
  00ada	d3 e0		 shl	 eax, cl
  00adc	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00adf	48		 dec	 eax
  00ae0	23 c7		 and	 eax, edi
  00ae2	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00ae5	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00ae8	8b c8		 mov	 ecx, eax
  00aea	c1 e9 08	 shr	 ecx, 8
  00aed	0f b6 c9	 movzx	 ecx, cl
  00af0	3b cb		 cmp	 ecx, ebx
  00af2	77 a4		 ja	 SHORT $LL206@inflateBac
$LN486@inflateBac:

; 551  :             }
; 552  :             if ((here.op & 0xf0) == 0) {

  00af4	a8 f0		 test	 al, 240			; 000000f0H
  00af6	0f 85 be 00 00
	00		 jne	 $LN225@inflateBac

; 553  :                 last = here;

  00afc	8b c8		 mov	 ecx, eax

; 554  :                 for (;;) {
; 555  :                     here = state->distcode[last.val +

  00afe	bf 01 00 00 00	 mov	 edi, 1
  00b03	c1 e9 08	 shr	 ecx, 8
  00b06	8b d0		 mov	 edx, eax
  00b08	0f b6 d9	 movzx	 ebx, cl
  00b0b	0f b6 c8	 movzx	 ecx, al
  00b0e	03 cb		 add	 ecx, ebx
  00b10	c1 e8 10	 shr	 eax, 16			; 00000010H
  00b13	d3 e7		 shl	 edi, cl
  00b15	8b cb		 mov	 ecx, ebx
  00b17	4f		 dec	 edi
  00b18	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  00b1b	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  00b1e	d3 ef		 shr	 edi, cl
  00b20	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
  00b23	03 f8		 add	 edi, eax
  00b25	8b 04 b9	 mov	 eax, DWORD PTR [ecx+edi*4]
  00b28	8b c8		 mov	 ecx, eax
  00b2a	c1 e9 08	 shr	 ecx, 8

; 556  :                             (BITS(last.bits + last.op) >> last.bits)];
; 557  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00b2d	0f b6 c9	 movzx	 ecx, cl
  00b30	03 cb		 add	 ecx, ebx
  00b32	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00b35	3b cb		 cmp	 ecx, ebx
  00b37	76 74		 jbe	 SHORT $LN226@inflateBac
  00b39	0f 1f 80 00 00
	00 00		 npad	 7
$LL215@inflateBac:

; 558  :                     PULLBYTE();

  00b40	85 f6		 test	 esi, esi
  00b42	75 1a		 jne	 SHORT $LN221@inflateBac
  00b44	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00b47	50		 push	 eax
  00b48	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00b4b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00b4e	8b f0		 mov	 esi, eax
  00b50	83 c4 08	 add	 esp, 8
  00b53	85 f6		 test	 esi, esi
  00b55	0f 84 e8 01 00
	00		 je	 $LN369@inflateBac
  00b5b	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN221@inflateBac:
  00b5e	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00b61	8b cb		 mov	 ecx, ebx
  00b63	83 c3 08	 add	 ebx, 8
  00b66	4e		 dec	 esi
  00b67	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00b6a	0f b6 de	 movzx	 ebx, dh
  00b6d	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00b70	47		 inc	 edi
  00b71	d3 e0		 shl	 eax, cl
  00b73	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00b76	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00b7a	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00b7d	bf 01 00 00 00	 mov	 edi, 1
  00b82	0f b6 ca	 movzx	 ecx, dl
  00b85	03 cb		 add	 ecx, ebx
  00b87	d3 e7		 shl	 edi, cl
  00b89	8b cb		 mov	 ecx, ebx
  00b8b	4f		 dec	 edi
  00b8c	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  00b8f	d3 ef		 shr	 edi, cl
  00b91	03 f8		 add	 edi, eax
  00b93	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00b96	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00b99	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00b9c	8b c8		 mov	 ecx, eax
  00b9e	c1 e9 08	 shr	 ecx, 8
  00ba1	0f b6 c9	 movzx	 ecx, cl
  00ba4	03 cb		 add	 ecx, ebx
  00ba6	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00ba9	3b cb		 cmp	 ecx, ebx
  00bab	77 93		 ja	 SHORT $LL215@inflateBac
$LN226@inflateBac:

; 559  :                 }
; 560  :                 DROPBITS(last.bits);

  00bad	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00bb0	0f b6 ce	 movzx	 ecx, dh
  00bb3	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00bb6	d3 ef		 shr	 edi, cl
  00bb8	2b d9		 sub	 ebx, ecx
$LN225@inflateBac:

; 561  :             }
; 562  :             DROPBITS(here.bits);

  00bba	8b c8		 mov	 ecx, eax
  00bbc	c1 e9 08	 shr	 ecx, 8
  00bbf	0f b6 c9	 movzx	 ecx, cl
  00bc2	d3 ef		 shr	 edi, cl
  00bc4	2b d9		 sub	 ebx, ecx
  00bc6	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00bc9	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 563  :             if (here.op & 64) {

  00bcc	a8 40		 test	 al, 64			; 00000040H
  00bce	74 16		 je	 SHORT $LN327@inflateBac

; 564  :                 strm->msg = (char *)"invalid distance code";

  00bd0	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00bd3	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code@

; 565  :                 state->mode = BAD;

  00bda	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 566  :                 break;

  00be1	e9 31 01 00 00	 jmp	 $LN487@inflateBac
$LN327@inflateBac:

; 567  :             }
; 568  :             state->offset = (unsigned)here.val;

  00be6	8b c8		 mov	 ecx, eax
  00be8	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00beb	89 4d d8	 mov	 DWORD PTR $T1[ebp], ecx
  00bee	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 569  : 
; 570  :             /* get distance extra bits, if any */
; 571  :             state->extra = (unsigned)(here.op) & 15;

  00bf1	0f b6 c8	 movzx	 ecx, al
  00bf4	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00bf7	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 572  :             if (state->extra != 0) {

  00bfa	74 60		 je	 SHORT $LN242@inflateBac

; 573  :                 NEEDBITS(state->extra);

  00bfc	3b d9		 cmp	 ebx, ecx
  00bfe	73 3f		 jae	 SHORT $LN230@inflateBac
  00c00	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LL233@inflateBac:
  00c03	85 f6		 test	 esi, esi
  00c05	75 1d		 jne	 SHORT $LN238@inflateBac
  00c07	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00c0a	50		 push	 eax
  00c0b	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00c0e	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00c11	8b f0		 mov	 esi, eax
  00c13	83 c4 08	 add	 esp, 8
  00c16	85 f6		 test	 esi, esi
  00c18	0f 84 25 01 00
	00		 je	 $LN369@inflateBac
  00c1e	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c21	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN238@inflateBac:
  00c24	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00c27	8b cb		 mov	 ecx, ebx
  00c29	d3 e0		 shl	 eax, cl
  00c2b	83 c3 08	 add	 ebx, 8
  00c2e	03 f8		 add	 edi, eax
  00c30	4e		 dec	 esi
  00c31	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00c34	40		 inc	 eax
  00c35	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00c38	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00c3b	3b d9		 cmp	 ebx, ecx
  00c3d	72 c4		 jb	 SHORT $LL233@inflateBac
$LN230@inflateBac:

; 574  :                 state->offset += BITS(state->extra);

  00c3f	b8 01 00 00 00	 mov	 eax, 1
  00c44	d3 e0		 shl	 eax, cl
  00c46	48		 dec	 eax
  00c47	23 c7		 and	 eax, edi

; 575  :                 DROPBITS(state->extra);

  00c49	d3 ef		 shr	 edi, cl
  00c4b	01 42 48	 add	 DWORD PTR [edx+72], eax
  00c4e	2b d9		 sub	 ebx, ecx
  00c50	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00c53	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
  00c56	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00c59	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN242@inflateBac:

; 576  :             }
; 577  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00c5c	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00c5f	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  00c62	1b c0		 sbb	 eax, eax
  00c64	23 45 ec	 and	 eax, DWORD PTR _left$1$[ebp]
  00c67	2b c8		 sub	 ecx, eax
  00c69	39 4d d8	 cmp	 DWORD PTR $T1[ebp], ecx
  00c6c	76 16		 jbe	 SHORT $LL246@inflateBac

; 578  :                                                 left : 0)) {
; 579  :                 strm->msg = (char *)"invalid distance too far back";

  00c6e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c71	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@

; 580  :                 state->mode = BAD;

  00c78	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 581  :                 break;

  00c7f	e9 93 00 00 00	 jmp	 $LN487@inflateBac
$LL246@inflateBac:

; 582  :             }
; 583  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 584  : 
; 585  :             /* copy match from window to output */
; 586  :             do {
; 587  :                 ROOM();

  00c84	83 7d ec 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  00c88	75 25		 jne	 SHORT $LN247@inflateBac
  00c8a	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00c8d	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00c90	51		 push	 ecx
  00c91	50		 push	 eax
  00c92	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00c95	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00c98	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  00c9b	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00c9e	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00ca1	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ca4	85 c0		 test	 eax, eax
  00ca6	0f 85 9e 00 00
	00		 jne	 $LN372@inflateBac
  00cac	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN247@inflateBac:

; 588  :                 copy = state->wsize - state->offset;

  00caf	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00cb2	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]

; 589  :                 if (copy < left) {
; 590  :                     from = put + copy;
; 591  :                     copy = left - copy;
; 592  :                 }
; 593  :                 else {
; 594  :                     from = put - state->offset;
; 595  :                     copy = left;
; 596  :                 }
; 597  :                 if (copy > state->length) copy = state->length;

  00cb5	8b 7d e8	 mov	 edi, DWORD PTR _put$1$[ebp]
  00cb8	2b d0		 sub	 edx, eax
  00cba	8b cf		 mov	 ecx, edi
  00cbc	2b c8		 sub	 ecx, eax
  00cbe	3b 55 ec	 cmp	 edx, DWORD PTR _left$1$[ebp]
  00cc1	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00cc4	0f 43 c1	 cmovae	 eax, ecx
  00cc7	89 45 d0	 mov	 DWORD PTR _from$1$[ebp], eax
  00cca	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  00ccd	8b c8		 mov	 ecx, eax
  00ccf	2b ca		 sub	 ecx, edx
  00cd1	3b d0		 cmp	 edx, eax
  00cd3	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cd6	0f 43 c8	 cmovae	 ecx, eax
  00cd9	8b 42 44	 mov	 eax, DWORD PTR [edx+68]

; 598  :                 state->length -= copy;

  00cdc	3b c8		 cmp	 ecx, eax
  00cde	8b d0		 mov	 edx, eax
  00ce0	0f 46 d1	 cmovbe	 edx, ecx
  00ce3	8b 4d d0	 mov	 ecx, DWORD PTR _from$1$[ebp]
  00ce6	2b c2		 sub	 eax, edx
  00ce8	89 55 d8	 mov	 DWORD PTR _copy$2$[ebp], edx
  00ceb	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cee	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 599  :                 left -= copy;

  00cf1	8b 55 d8	 mov	 edx, DWORD PTR _copy$2$[ebp]
  00cf4	29 55 ec	 sub	 DWORD PTR _left$1$[ebp], edx
$LL252@inflateBac:

; 600  :                 do {
; 601  :                     *put++ = *from++;

  00cf7	8a 01		 mov	 al, BYTE PTR [ecx]
  00cf9	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00cfc	88 07		 mov	 BYTE PTR [edi], al
  00cfe	47		 inc	 edi

; 602  :                 } while (--copy);

  00cff	83 ea 01	 sub	 edx, 1
  00d02	75 f3		 jne	 SHORT $LL252@inflateBac

; 603  :             } while (state->length != 0);

  00d04	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00d07	89 7d e8	 mov	 DWORD PTR _put$1$[ebp], edi
  00d0a	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00d0d	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00d11	0f 85 6d ff ff
	ff		 jne	 $LL246@inflateBac
$LN487@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00d17	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00d1a	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00d1f	83 f8 12	 cmp	 eax, 18			; 00000012H
  00d22	0f 86 4d f3 ff
	ff		 jbe	 $LN497@inflateBac
$LN341@inflateBac:

; 618  : 
; 619  :         default:                /* can't happen, but makes compilers happy */
; 620  :             ret = Z_STREAM_ERROR;

  00d28	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$inf_leave$499:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d2d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00d30	8b 4d fc	 mov	 ecx, DWORD PTR _next$[ebp]

; 627  :     strm->avail_in = have;

  00d33	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00d36	89 08		 mov	 DWORD PTR [eax], ecx

; 628  :     return ret;

  00d38	8b c7		 mov	 eax, edi
  00d3a	5f		 pop	 edi
  00d3b	5e		 pop	 esi
  00d3c	5b		 pop	 ebx

; 629  : }

  00d3d	8b e5		 mov	 esp, ebp
  00d3f	5d		 pop	 ebp
  00d40	c2 14 00	 ret	 20			; 00000014H
$LN369@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d43	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next$[ebp], 0
$LN372@inflateBac:
  00d4a	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d4f	eb dc		 jmp	 SHORT $inf_leave$499
$LN371@inflateBac:

; 342  :                 copy = state->length;
; 343  :                 PULL();

  00d51	89 5d fc	 mov	 DWORD PTR _next$[ebp], ebx
  00d54	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d59	eb d2		 jmp	 SHORT $inf_leave$499
$LN337@inflateBac:

; 604  :             break;
; 605  : 
; 606  :         case DONE:
; 607  :             /* inflate stream terminated properly -- write leftover output */
; 608  :             ret = Z_STREAM_END;
; 609  :             if (left < state->wsize) {

  00d5b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00d5e	bf 01 00 00 00	 mov	 edi, 1
  00d63	8b 4d ec	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00d66	3b c8		 cmp	 ecx, eax
  00d68	73 c3		 jae	 SHORT $inf_leave$499

; 610  :                 if (out(out_desc, state->window, state->wsize - left))

  00d6a	2b c1		 sub	 eax, ecx
  00d6c	50		 push	 eax
  00d6d	ff 72 38	 push	 DWORD PTR [edx+56]
  00d70	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00d73	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d76	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d79	85 c0		 test	 eax, eax
  00d7b	74 b0		 je	 SHORT $inf_leave$499

; 611  :                     ret = Z_BUF_ERROR;

  00d7d	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH

; 612  :             }
; 613  :             goto inf_leave;

  00d82	eb a9		 jmp	 SHORT $inf_leave$499
$LN340@inflateBac:

; 614  : 
; 615  :         case BAD:
; 616  :             ret = Z_DATA_ERROR;

  00d84	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH

; 617  :             goto inf_leave;

  00d89	eb a2		 jmp	 SHORT $inf_leave$499
$LN254@inflateBac:

; 274  :         return Z_STREAM_ERROR;

  00d8b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 629  : }

  00d90	8b e5		 mov	 esp, ebp
  00d92	5d		 pop	 ebp
  00d93	c2 14 00	 ret	 20			; 00000014H
  00d96	66 90		 npad	 2
$LN479@inflateBac:
  00d98	00 00 00 00	 DD	 $LN255@inflateBac
  00d9c	00 00 00 00	 DD	 $LN31@inflateBac
  00da0	00 00 00 00	 DD	 $LN56@inflateBac
  00da4	00 00 00 00	 DD	 $LN302@inflateBac
  00da8	00 00 00 00	 DD	 $LN337@inflateBac
  00dac	00 00 00 00	 DD	 $LN340@inflateBac
  00db0	00 00 00 00	 DD	 $LN341@inflateBac
$LN478@inflateBac:
  00db4	00		 DB	 0
  00db5	06		 DB	 6
  00db6	01		 DB	 1
  00db7	06		 DB	 6
  00db8	06		 DB	 6
  00db9	02		 DB	 2
  00dba	06		 DB	 6
  00dbb	06		 DB	 6
  00dbc	06		 DB	 6
  00dbd	03		 DB	 3
  00dbe	06		 DB	 6
  00dbf	06		 DB	 6
  00dc0	06		 DB	 6
  00dc1	06		 DB	 6
  00dc2	06		 DB	 6
  00dc3	06		 DB	 6
  00dc4	06		 DB	 6
  00dc5	04		 DB	 4
  00dc6	05		 DB	 5
  00dc7	90		 npad	 1
$LN480@inflateBac:
  00dc8	00 00 00 00	 DD	 $LN259@inflateBac
  00dcc	00 00 00 00	 DD	 $LN260@inflateBac
  00dd0	00 00 00 00	 DD	 $LN261@inflateBac
  00dd4	00 00 00 00	 DD	 $LN262@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File G:\C_Library\zlib-VS\zlib-1.2.11\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 634  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN3@inflateBac
  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $LN3@inflateBac
  00012	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00015	85 c9		 test	 ecx, ecx
  00017	74 17		 je	 SHORT $LN3@inflateBac

; 636  :     ZFREE(strm, strm->state);

  00019	50		 push	 eax
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d1		 call	 ecx
  0001f	83 c4 08	 add	 esp, 8

; 637  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 638  :     Tracev((stderr, "inflate: end\n"));
; 639  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 640  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN3@inflateBac:

; 635  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 640  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
